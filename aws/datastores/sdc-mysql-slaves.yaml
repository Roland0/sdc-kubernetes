
# Client service for connecting to any MySQL instance for reads 
# read from host sysdigcloud-mysql-read
# load balanced to master and slaves
apiVersion: v1
kind: Service
metadata:
  name: sysdigcloud-mysql-slave
  namespace: sysdigcloud
  labels:
    app: sysdigcloud
    role: mysql-slave
spec:
  ports:
    - port: 3306
      name: sql
  selector:
    name: sysdigcloud-mysql-slave
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: sysdigcloud-mysql-slave
  namespace: sysdigcloud
  labels:
    app: sysdigcloud
spec:
  serviceName: sysdigcloud-mysql-slave
  replicas: 3
  selector:
    matchLabels:
      app: sysdigcloud
  template:
    metadata:
      labels:
        app: sysdigcloud
        role: mysql-slave
    spec:
      initContainers:
      - name: init-mysql
        image: mysql:5.7
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Generate mysql server-id from pod ordinal index.
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] > /mnt/conf.d/server-id.cnf
          # Add an offset to avoid reserved server-id=0 value.
          echo server-id=$((200 + $ordinal)) >> /mnt/conf.d/server-id.cnf
          # Copy appropriate conf.d files from config-map to emptyDir.
          cp /mnt/config-map/slave.cnf /mnt/conf.d/
        volumeMounts:
        - name: mysql-config
          mountPath: /mnt/conf.d
        - name: config-map
          mountPath: /mnt/config-map
      - name: clone-mysql
        image: gcr.io/google-samples/xtrabackup:1.0
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Skip the clone if data already exists.
          #[[ -d /var/lib/mysql/mysql ]] && exit 0
          # Skip the clone on master (ordinal index 0).
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          if [[ $ordinal -eq 0 ]]; then 
            # Clone data from previous peer. You are server-id=200 ie first slave. replicate from master
            ncat --recv-only sysdigcloud-mysql 3307 | xbstream -x -C /var/lib/mysql
          else
            # Clone data from previous peer. 
            #ncat --recv-only sysdigcloud-mysql-$(($ordinal-1)) 3307 | xbstream -x -C /var/lib/mysql
            ncat --recv-only sysdigcloud-mysql 3307 | xbstream -x -C /var/lib/mysql
          fi
          # Prepare the backup.
          xtrabackup --prepare --target-dir=/var/lib/mysql
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: mysql-config
          mountPath: /etc/mysql/conf.d
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: sysdigcloud-mysql-config-slave
              key: mysql.root.password
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: sysdigcloud-mysql-config-slave
              key: mysql.user
        - name: MYSQL_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: sysdigcloud-mysql-config-slave
              key: mysql.password
        - name: MYSQL_DATABASE
          value: draios
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: mysql-config
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            # Check we can execute queries over TCP (skip-networking is off).
            command: ["mysql", "-u", "root", "-ppassword", "-h", "127.0.0.1", "-e", "SELECT 1"]
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
      - name: xtrabackup
        image: gcr.io/google-samples/xtrabackup:1.0
        ports:
        - name: xtrabackup
          containerPort: 3307
        command:
        - bash
        - "-c"
        - |
          set -ex
          cd /var/lib/mysql

          # Determine binlog position of cloned data, if any.
          if [[ -f xtrabackup_slave_info ]]; then
            # XtraBackup already generated a partial "CHANGE MASTER TO" query
            # because we're cloning from an existing slave.
            mv xtrabackup_slave_info change_master_to.sql.in
            # Ignore xtrabackup_binlog_info in this case (it's useless).
            rm -f xtrabackup_binlog_info
          elif [[ -f xtrabackup_binlog_info ]]; then
            # We're cloning directly from master. Parse binlog position.
            [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
            rm xtrabackup_binlog_info
            echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                  MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
          fi

          # Check if we need to complete a clone by starting replication.
          if [[ -f change_master_to.sql.in ]]; then
            echo "Waiting for mysqld to be ready (accepting connections)"
            until mysql -u root -ppassword -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done

            echo "Initializing replication from clone position"
            # In case of container restart, attempt this at-most-once.
            mv change_master_to.sql.in change_master_to.sql.orig
            mysql -u root -ppassword -h 127.0.0.1 <<EOF
          $(<change_master_to.sql.orig),
            MASTER_HOST='sysdigcloud-mysql-0.sysdigcloud-mysql',
            MASTER_USER='root',
            MASTER_PASSWORD='password',
            MASTER_CONNECT_RETRY=10;
          START SLAVE;
          EOF
          fi

          # Start a server to send backups when requested by peers.
          exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
            "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root --password=password"
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: mysql-config
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
      volumes:
      - name: mysql-config
        emptyDir: {}
      - name: config-map
        configMap:
          name: sysdigcloud-mysql-config-slave
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      storageClassName: aws-gp2-multi-az
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 2Gi
