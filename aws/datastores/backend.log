[Global flags]
    uintx AdaptiveSizeDecrementScaleFactor          = 4                                   {product}
    uintx AdaptiveSizeMajorGCDecayTimeScale         = 10                                  {product}
    uintx AdaptiveSizePausePolicy                   = 0                                   {product}
    uintx AdaptiveSizePolicyCollectionCostMargin    = 50                                  {product}
    uintx AdaptiveSizePolicyInitializingSteps       = 20                                  {product}
    uintx AdaptiveSizePolicyOutputInterval          = 0                                   {product}
    uintx AdaptiveSizePolicyWeight                  = 10                                  {product}
    uintx AdaptiveSizeThroughPutPolicy              = 0                                   {product}
    uintx AdaptiveTimeWeight                        = 25                                  {product}
     bool AdjustConcurrency                         = false                               {product}
     bool AggressiveOpts                            = false                               {product}
     intx AliasLevel                                = 3                                   {C2 product}
     bool AlignVector                               = false                               {C2 product}
     intx AllocateInstancePrefetchLines             = 1                                   {product}
     intx AllocatePrefetchDistance                  = 192                                 {product}
     intx AllocatePrefetchInstr                     = 0                                   {product}
     intx AllocatePrefetchLines                     = 4                                   {product}
     intx AllocatePrefetchStepSize                  = 64                                  {product}
     intx AllocatePrefetchStyle                     = 1                                   {product}
     bool AllowJNIEnvProxy                          = false                               {product}
     bool AllowNonVirtualCalls                      = false                               {product}
     bool AllowParallelDefineClass                  = false                               {product}
     bool AllowUserSignalHandlers                   = false                               {product}
     bool AlwaysActAsServerClassMachine             = false                               {product}
     bool AlwaysCompileLoopMethods                  = false                               {product}
     bool AlwaysLockClassLoader                     = false                               {product}
     bool AlwaysPreTouch                            = false                               {product}
     bool AlwaysRestoreFPU                          = false                               {product}
     bool AlwaysTenure                              = false                               {product}
     bool AssertOnSuspendWaitFailure                = false                               {product}
     bool AssumeMP                                  = false                               {product}
     intx AutoBoxCacheMax                           = 128                                 {C2 product}
    uintx AutoGCSelectPauseMillis                   = 5000                                {product}
     intx BCEATraceLevel                            = 0                                   {product}
     intx BackEdgeThreshold                         = 100000                              {pd product}
     bool BackgroundCompilation                     = true                                {pd product}
    uintx BaseFootPrintEstimate                     = 268435456                           {product}
     intx BiasedLockingBulkRebiasThreshold          = 20                                  {product}
     intx BiasedLockingBulkRevokeThreshold          = 40                                  {product}
     intx BiasedLockingDecayTime                    = 25000                               {product}
     intx BiasedLockingStartupDelay                 = 4000                                {product}
     bool BindGCTaskThreadsToCPUs                   = false                               {product}
     bool BlockLayoutByFrequency                    = true                                {C2 product}
     intx BlockLayoutMinDiamondPercentage           = 20                                  {C2 product}
     bool BlockLayoutRotateLoops                    = true                                {C2 product}
     bool BranchOnRegister                          = false                               {C2 product}
     bool BytecodeVerificationLocal                 = false                               {product}
     bool BytecodeVerificationRemote                = true                                {product}
     bool C1OptimizeVirtualCallProfiling            = true                                {C1 product}
     bool C1ProfileBranches                         = true                                {C1 product}
     bool C1ProfileCalls                            = true                                {C1 product}
     bool C1ProfileCheckcasts                       = true                                {C1 product}
     bool C1ProfileInlinedCalls                     = true                                {C1 product}
     bool C1ProfileVirtualCalls                     = true                                {C1 product}
     bool C1UpdateMethodData                        = true                                {C1 product}
     intx CICompilerCount                          := 2                                   {product}
     bool CICompilerCountPerCPU                     = true                                {product}
     bool CITime                                    = false                               {product}
     bool CMSAbortSemantics                         = false                               {product}
    uintx CMSAbortablePrecleanMinWorkPerIteration   = 100                                 {product}
     intx CMSAbortablePrecleanWaitMillis            = 100                                 {manageable}
    uintx CMSBitMapYieldQuantum                     = 10485760                            {product}
    uintx CMSBootstrapOccupancy                     = 50                                  {product}
     bool CMSClassUnloadingEnabled                 := true                                {product}
    uintx CMSClassUnloadingMaxInterval              = 0                                   {product}
     bool CMSCleanOnEnter                           = true                                {product}
     bool CMSCompactWhenClearAllSoftRefs            = true                                {product}
    uintx CMSConcMarkMultiple                       = 32                                  {product}
     bool CMSConcurrentMTEnabled                    = false                               {product}
    uintx CMSCoordinatorYieldSleepCount             = 10                                  {product}
     bool CMSDumpAtPromotionFailure                 = false                               {product}
     bool CMSEdenChunksRecordAlways                := true                                {product}
    uintx CMSExpAvgFactor                           = 50                                  {product}
     bool CMSExtrapolateSweep                       = false                               {product}
    uintx CMSFullGCsBeforeCompaction                = 0                                   {product}
    uintx CMSIncrementalDutyCycle                   = 10                                  {product}
    uintx CMSIncrementalDutyCycleMin                = 0                                   {product}
     bool CMSIncrementalMode                        = false                               {product}
    uintx CMSIncrementalOffset                      = 0                                   {product}
     bool CMSIncrementalPacing                      = true                                {product}
    uintx CMSIncrementalSafetyFactor                = 10                                  {product}
    uintx CMSIndexedFreeListReplenish               = 4                                   {product}
     intx CMSInitiatingOccupancyFraction           := 75                                  {product}
    uintx CMSIsTooFullPercentage                    = 98                                  {product}
   double CMSLargeCoalSurplusPercent                = 0.950000                            {product}
   double CMSLargeSplitSurplusPercent               = 1.000000                            {product}
     bool CMSLoopWarn                               = false                               {product}
    uintx CMSMaxAbortablePrecleanLoops              = 0                                   {product}
     intx CMSMaxAbortablePrecleanTime               = 5000                                {product}
    uintx CMSOldPLABMax                             = 1024                                {product}
    uintx CMSOldPLABMin                             = 16                                  {product}
    uintx CMSOldPLABNumRefills                      = 4                                   {product}
    uintx CMSOldPLABReactivityFactor                = 2                                   {product}
     bool CMSOldPLABResizeQuicker                   = false                               {product}
    uintx CMSOldPLABToleranceFactor                 = 4                                   {product}
     bool CMSPLABRecordAlways                       = true                                {product}
    uintx CMSParPromoteBlocksToClaim                = 16                                  {product}
     bool CMSParallelInitialMarkEnabled            := true                                {product}
     bool CMSParallelRemarkEnabled                 := true                                {product}
     bool CMSParallelSurvivorRemarkEnabled          = true                                {product}
    uintx CMSPrecleanDenominator                    = 3                                   {product}
    uintx CMSPrecleanIter                           = 3                                   {product}
    uintx CMSPrecleanNumerator                      = 2                                   {product}
     bool CMSPrecleanRefLists1                      = true                                {product}
     bool CMSPrecleanRefLists2                      = false                               {product}
     bool CMSPrecleanSurvivors1                     = false                               {product}
     bool CMSPrecleanSurvivors2                     = true                                {product}
    uintx CMSPrecleanThreshold                      = 1000                                {product}
     bool CMSPrecleaningEnabled                     = true                                {product}
     bool CMSPrintChunksInDump                      = false                               {product}
     bool CMSPrintEdenSurvivorChunks                = false                               {product}
     bool CMSPrintObjectsInDump                     = false                               {product}
    uintx CMSRemarkVerifyVariant                    = 1                                   {product}
     bool CMSReplenishIntermediate                  = true                                {product}
    uintx CMSRescanMultiple                         = 32                                  {product}
    uintx CMSSamplingGrain                          = 16384                               {product}
     bool CMSScavengeBeforeRemark                   = false                               {product}
    uintx CMSScheduleRemarkEdenPenetration          = 50                                  {product}
    uintx CMSScheduleRemarkEdenSizeThreshold        = 2097152                             {product}
    uintx CMSScheduleRemarkSamplingRatio            = 5                                   {product}
   double CMSSmallCoalSurplusPercent                = 1.050000                            {product}
   double CMSSmallSplitSurplusPercent               = 1.100000                            {product}
     bool CMSSplitIndexedFreeListBlocks             = true                                {product}
     intx CMSTriggerInterval                        = -1                                  {manageable}
    uintx CMSTriggerRatio                           = 80                                  {product}
     intx CMSWaitDuration                          := 10000                               {manageable}
    uintx CMSWorkQueueDrainThreshold                = 10                                  {product}
     bool CMSYield                                  = true                                {product}
    uintx CMSYieldSleepCount                        = 0                                   {product}
    uintx CMSYoungGenPerWorker                      = 67108864                            {pd product}
    uintx CMS_FLSPadding                            = 1                                   {product}
    uintx CMS_FLSWeight                             = 75                                  {product}
    uintx CMS_SweepPadding                          = 1                                   {product}
    uintx CMS_SweepTimerThresholdMillis             = 10                                  {product}
    uintx CMS_SweepWeight                           = 75                                  {product}
     bool CheckEndorsedAndExtDirs                   = false                               {product}
     bool CheckJNICalls                             = false                               {product}
     bool ClassUnloading                            = true                                {product}
     bool ClassUnloadingWithConcurrentMark          = true                                {product}
     intx ClearFPUAtPark                            = 0                                   {product}
     bool ClipInlining                              = true                                {product}
    uintx CodeCacheExpansionSize                    = 65536                               {pd product}
    uintx CodeCacheMinimumFreeSpace                 = 512000                              {product}
     bool CollectGen0First                          = false                               {product}
     bool CompactFields                             = true                                {product}
     intx CompilationPolicyChoice                   = 3                                   {product}
ccstrlist CompileCommand                            =                                     {product}
    ccstr CompileCommandFile                        =                                     {product}
ccstrlist CompileOnly                               =                                     {product}
     intx CompileThreshold                          = 10000                               {pd product}
     bool CompilerThreadHintNoPreempt               = true                                {product}
     intx CompilerThreadPriority                    = -1                                  {product}
     intx CompilerThreadStackSize                   = 0                                   {pd product}
    uintx CompressedClassSpaceSize                  = 1073741824                          {product}
    uintx ConcGCThreads                             = 0                                   {product}
     intx ConditionalMoveLimit                      = 3                                   {C2 pd product}
     intx ContendedPaddingWidth                     = 128                                 {product}
     bool ConvertSleepToYield                       = true                                {pd product}
     bool ConvertYieldToSleep                       = false                               {product}
     bool CrashOnOutOfMemoryError                   = false                               {product}
     bool CreateMinidumpOnCrash                     = false                               {product}
     bool CriticalJNINatives                        = true                                {product}
     bool DTraceAllocProbes                         = false                               {product}
     bool DTraceMethodProbes                        = false                               {product}
     bool DTraceMonitorProbes                       = false                               {product}
     bool Debugging                                 = false                               {product}
    uintx DefaultMaxRAMFraction                     = 4                                   {product}
     intx DefaultThreadPriority                     = -1                                  {product}
     intx DeferPollingPageLoopCount                 = -1                                  {product}
     intx DeferThrSuspendLoopCount                  = 4000                                {product}
     bool DeoptimizeRandom                          = false                               {product}
     bool DisableAttachMechanism                    = false                               {product}
     bool DisableExplicitGC                         = false                               {product}
     bool DisplayVMOutputToStderr                   = false                               {product}
     bool DisplayVMOutputToStdout                   = false                               {product}
     bool DoEscapeAnalysis                          = true                                {C2 product}
     bool DontCompileHugeMethods                    = true                                {product}
     bool DontYieldALot                             = false                               {pd product}
    ccstr DumpLoadedClassList                       =                                     {product}
     bool DumpReplayDataOnError                     = true                                {product}
     bool DumpSharedSpaces                          = false                               {product}
     bool EagerXrunInit                             = false                               {product}
     intx EliminateAllocationArraySizeLimit         = 64                                  {C2 product}
     bool EliminateAllocations                      = true                                {C2 product}
     bool EliminateAutoBox                          = true                                {C2 product}
     bool EliminateLocks                            = true                                {C2 product}
     bool EliminateNestedLocks                      = true                                {C2 product}
     intx EmitSync                                  = 0                                   {product}
     bool EnableContended                           = true                                {product}
     bool EnableResourceManagementTLABCache         = true                                {product}
     bool EnableSharedLookupCache                   = true                                {product}
     bool EnableTracing                             = false                               {product}
    uintx ErgoHeapSizeLimit                         = 0                                   {product}
    ccstr ErrorFile                                 =                                     {product}
    ccstr ErrorReportServer                         =                                     {product}
   double EscapeAnalysisTimeout                     = 20.000000                           {C2 product}
     bool EstimateArgEscape                         = true                                {product}
     bool ExitOnOutOfMemoryError                    = false                               {product}
     bool ExplicitGCInvokesConcurrent               = false                               {product}
     bool ExplicitGCInvokesConcurrentAndUnloadsClasses  = false                               {product}
     bool ExtendedDTraceProbes                      = false                               {product}
    ccstr ExtraSharedClassListFile                  =                                     {product}
     bool FLSAlwaysCoalesceLarge                    = false                               {product}
    uintx FLSCoalescePolicy                         = 2                                   {product}
   double FLSLargestBlockCoalesceProximity          = 0.990000                            {product}
     bool FailOverToOldVerifier                     = true                                {product}
     bool FastTLABRefill                            = true                                {product}
     intx FenceInstruction                          = 0                                   {ARCH product}
     intx FieldsAllocationStyle                     = 1                                   {product}
     bool FilterSpuriousWakeups                     = true                                {product}
    ccstr FlightRecorderOptions                     =                                     {product}
     bool ForceNUMA                                 = false                               {product}
     bool ForceTimeHighResolution                   = false                               {product}
     intx FreqInlineSize                            = 325                                 {pd product}
   double G1ConcMarkStepDurationMillis              = 10.000000                           {product}
    uintx G1ConcRSHotCardLimit                      = 4                                   {product}
    uintx G1ConcRSLogCacheSize                      = 10                                  {product}
     intx G1ConcRefinementGreenZone                 = 0                                   {product}
     intx G1ConcRefinementRedZone                   = 0                                   {product}
     intx G1ConcRefinementServiceIntervalMillis     = 300                                 {product}
    uintx G1ConcRefinementThreads                   = 0                                   {product}
     intx G1ConcRefinementThresholdStep             = 0                                   {product}
     intx G1ConcRefinementYellowZone                = 0                                   {product}
    uintx G1ConfidencePercent                       = 50                                  {product}
    uintx G1HeapRegionSize                          = 0                                   {product}
    uintx G1HeapWastePercent                        = 5                                   {product}
    uintx G1MixedGCCountTarget                      = 8                                   {product}
     intx G1RSetRegionEntries                       = 0                                   {product}
    uintx G1RSetScanBlockSize                       = 64                                  {product}
     intx G1RSetSparseRegionEntries                 = 0                                   {product}
     intx G1RSetUpdatingPauseTimePercent            = 10                                  {product}
     intx G1RefProcDrainInterval                    = 10                                  {product}
    uintx G1ReservePercent                          = 10                                  {product}
    uintx G1SATBBufferEnqueueingThresholdPercent    = 60                                  {product}
     intx G1SATBBufferSize                          = 1024                                {product}
     intx G1UpdateBufferSize                        = 256                                 {product}
     bool G1UseAdaptiveConcRefinement               = true                                {product}
    uintx GCDrainStackTargetSize                    = 64                                  {product}
    uintx GCHeapFreeLimit                           = 2                                   {product}
    uintx GCLockerEdenExpansionPercent              = 5                                   {product}
     bool GCLockerInvokesConcurrent                 = false                               {product}
    uintx GCLogFileSize                             = 8192                                {product}
    uintx GCPauseIntervalMillis                     = 0                                   {product}
    uintx GCTaskTimeStampEntries                    = 200                                 {product}
    uintx GCTimeLimit                               = 98                                  {product}
    uintx GCTimeRatio                               = 99                                  {product}
    uintx HeapBaseMinAddress                        = 2147483648                          {pd product}
     bool HeapDumpAfterFullGC                       = false                               {manageable}
     bool HeapDumpBeforeFullGC                      = false                               {manageable}
     bool HeapDumpOnOutOfMemoryError                = false                               {manageable}
    ccstr HeapDumpPath                              =                                     {manageable}
    uintx HeapFirstMaximumCompactionCount           = 3                                   {product}
    uintx HeapMaximumCompactionInterval             = 20                                  {product}
    uintx HeapSizePerGCThread                       = 87241520                            {product}
     bool IgnoreEmptyClassPaths                     = false                               {product}
     bool IgnoreUnrecognizedVMOptions               = false                               {product}
    uintx IncreaseFirstTierCompileThresholdAt       = 50                                  {product}
     bool IncrementalInline                         = true                                {C2 product}
    uintx InitialBootClassLoaderMetaspaceSize       = 4194304                             {product}
    uintx InitialCodeCacheSize                      = 2555904                             {pd product}
    uintx InitialHeapSize                          := 123731968                           {product}
    uintx InitialRAMFraction                        = 64                                  {product}
    uintx InitialSurvivorRatio                      = 8                                   {product}
    uintx InitialTenuringThreshold                 := 1                                   {product}
    uintx InitiatingHeapOccupancyPercent            = 45                                  {product}
     bool Inline                                    = true                                {product}
    ccstr InlineDataFile                            =                                     {product}
     intx InlineSmallCode                           = 2000                                {pd product}
     bool InlineSynchronizedMethods                 = true                                {C1 product}
     bool InsertMemBarAfterArraycopy                = true                                {C2 product}
     intx InteriorEntryAlignment                    = 16                                  {C2 pd product}
     intx InterpreterProfilePercentage              = 33                                  {product}
     bool JNIDetachReleasesMonitors                 = true                                {product}
     bool JavaMonitorsInStackTrace                  = true                                {product}
     intx JavaPriority10_To_OSPriority              = -1                                  {product}
     intx JavaPriority1_To_OSPriority               = -1                                  {product}
     intx JavaPriority2_To_OSPriority               = -1                                  {product}
     intx JavaPriority3_To_OSPriority               = -1                                  {product}
     intx JavaPriority4_To_OSPriority               = -1                                  {product}
     intx JavaPriority5_To_OSPriority               = -1                                  {product}
     intx JavaPriority6_To_OSPriority               = -1                                  {product}
     intx JavaPriority7_To_OSPriority               = -1                                  {product}
     intx JavaPriority8_To_OSPriority               = -1                                  {product}
     intx JavaPriority9_To_OSPriority               = -1                                  {product}
     bool LIRFillDelaySlots                         = false                               {C1 pd product}
    uintx LargePageHeapSizeThreshold                = 134217728                           {product}
    uintx LargePageSizeInBytes                      = 0                                   {product}
     bool LazyBootClassLoader                       = true                                {product}
     intx LiveNodeCountInliningCutoff               = 40000                               {C2 product}
     bool LoadExecStackDllInVMThread                = true                                {product}
     bool LogCommercialFeatures                     = false                               {product}
     intx LoopMaxUnroll                             = 16                                  {C2 product}
     intx LoopOptsCount                             = 43                                  {C2 product}
     intx LoopUnrollLimit                           = 60                                  {C2 pd product}
     intx LoopUnrollMin                             = 4                                   {C2 product}
     bool LoopUnswitching                           = true                                {C2 product}
     bool ManagementServer                          = false                               {product}
    uintx MarkStackSize                             = 4194304                             {product}
    uintx MarkStackSizeMax                          = 536870912                           {product}
    uintx MarkSweepAlwaysCompactCount               = 4                                   {product}
    uintx MarkSweepDeadRatio                        = 5                                   {product}
     intx MaxBCEAEstimateLevel                      = 5                                   {product}
     intx MaxBCEAEstimateSize                       = 150                                 {product}
    uintx MaxDirectMemorySize                       = 0                                   {product}
     bool MaxFDLimit                                = true                                {product}
    uintx MaxGCMinorPauseMillis                     = 18446744073709551615                    {product}
    uintx MaxGCPauseMillis                          = 18446744073709551615                    {product}
    uintx MaxHeapFreeRatio                          = 70                                  {manageable}
    uintx MaxHeapSize                              := 1962934272                          {product}
     intx MaxInlineLevel                            = 9                                   {product}
     intx MaxInlineSize                             = 35                                  {product}
     intx MaxJNILocalCapacity                       = 65536                               {product}
     intx MaxJavaStackTraceDepth                    = 1024                                {product}
     intx MaxJumpTableSize                          = 65000                               {C2 product}
     intx MaxJumpTableSparseness                    = 5                                   {C2 product}
     intx MaxLabelRootDepth                         = 1100                                {C2 product}
     intx MaxLoopPad                                = 11                                  {C2 product}
    uintx MaxMetaspaceExpansion                     = 5451776                             {product}
    uintx MaxMetaspaceFreeRatio                     = 70                                  {product}
    uintx MaxMetaspaceSize                          = 18446744073709547520                    {product}
    uintx MaxNewSize                               := 174456832                           {product}
     intx MaxNodeLimit                              = 75000                               {C2 product}
 uint64_t MaxRAM                                    = 137438953472                        {pd product}
    uintx MaxRAMFraction                            = 4                                   {product}
     intx MaxRecursiveInlineLevel                   = 1                                   {product}
    uintx MaxTenuringThreshold                     := 1                                   {product}
     intx MaxTrivialSize                            = 6                                   {product}
     intx MaxVectorSize                             = 32                                  {C2 product}
    uintx MetaspaceSize                             = 21807104                            {pd product}
     bool MethodFlushing                            = true                                {product}
    uintx MinHeapDeltaBytes                        := 196608                              {product}
    uintx MinHeapFreeRatio                          = 40                                  {manageable}
     intx MinInliningThreshold                      = 250                                 {product}
     intx MinJumpTableSize                          = 10                                  {C2 pd product}
    uintx MinMetaspaceExpansion                     = 339968                              {product}
    uintx MinMetaspaceFreeRatio                     = 40                                  {product}
    uintx MinRAMFraction                            = 2                                   {product}
    uintx MinSurvivorRatio                          = 3                                   {product}
    uintx MinTLABSize                               = 2048                                {product}
     intx MonitorBound                              = 0                                   {product}
     bool MonitorInUseLists                         = false                               {product}
     intx MultiArrayExpandLimit                     = 6                                   {C2 product}
     bool MustCallLoadClassInternal                 = false                               {product}
    uintx NUMAChunkResizeWeight                     = 20                                  {product}
    uintx NUMAInterleaveGranularity                 = 2097152                             {product}
    uintx NUMAPageScanRate                          = 256                                 {product}
    uintx NUMASpaceResizeRate                       = 1073741824                          {product}
     bool NUMAStats                                 = false                               {product}
    ccstr NativeMemoryTracking                      = off                                 {product}
     bool NeedsDeoptSuspend                         = false                               {pd product}
     bool NeverActAsServerClassMachine              = false                               {pd product}
     bool NeverTenure                               = false                               {product}
    uintx NewRatio                                  = 2                                   {product}
    uintx NewSize                                  := 41222144                            {product}
    uintx NewSizeThreadIncrease                     = 5320                                {pd product}
     intx NmethodSweepActivity                      = 10                                  {product}
     intx NmethodSweepCheckInterval                 = 5                                   {product}
     intx NmethodSweepFraction                      = 16                                  {product}
     intx NodeLimitFudgeFactor                      = 2000                                {C2 product}
    uintx NumberOfGCLogFiles                        = 0                                   {product}
     intx NumberOfLoopInstrToAlign                  = 4                                   {C2 product}
     intx ObjectAlignmentInBytes                    = 8                                   {lp64_product}
    uintx OldPLABSize                              := 16                                  {product}
    uintx OldPLABWeight                             = 50                                  {product}
    uintx OldSize                                  := 82509824                            {product}
     bool OmitStackTraceInFastThrow                 = true                                {product}
ccstrlist OnError                                   =                                     {product}
ccstrlist OnOutOfMemoryError                        =                                     {product}
     intx OnStackReplacePercentage                  = 140                                 {pd product}
     bool OptimizeFill                              = true                                {C2 product}
     bool OptimizePtrCompare                        = true                                {C2 product}
     bool OptimizeStringConcat                      = true                                {C2 product}
     bool OptoBundling                              = false                               {C2 pd product}
     intx OptoLoopAlignment                         = 16                                  {pd product}
     bool OptoScheduling                            = false                               {C2 pd product}
    uintx PLABWeight                                = 75                                  {product}
     bool PSChunkLargeArrays                        = true                                {product}
     intx ParGCArrayScanChunk                       = 50                                  {product}
    uintx ParGCDesiredObjsFromOverflowList          = 20                                  {product}
     bool ParGCTrimOverflow                         = true                                {product}
     bool ParGCUseLocalOverflow                     = true                                {product}
    uintx ParallelGCBufferWastePct                  = 10                                  {product}
    uintx ParallelGCThreads                         = 2                                   {product}
     bool ParallelGCVerbose                         = false                               {product}
    uintx ParallelOldDeadWoodLimiterMean            = 50                                  {product}
    uintx ParallelOldDeadWoodLimiterStdDev          = 80                                  {product}
     bool ParallelRefProcBalancingEnabled           = true                                {product}
     bool ParallelRefProcEnabled                    = false                               {product}
     bool PartialPeelAtUnsignedTests                = true                                {C2 product}
     bool PartialPeelLoop                           = true                                {C2 product}
     intx PartialPeelNewPhiDelta                    = 0                                   {C2 product}
    uintx PausePadding                              = 1                                   {product}
     intx PerBytecodeRecompilationCutoff            = 200                                 {product}
     intx PerBytecodeTrapLimit                      = 4                                   {product}
     intx PerMethodRecompilationCutoff              = 400                                 {product}
     intx PerMethodTrapLimit                        = 100                                 {product}
     bool PerfAllowAtExitRegistration               = false                               {product}
     bool PerfBypassFileSystemCheck                 = false                               {product}
     intx PerfDataMemorySize                        = 32768                               {product}
     intx PerfDataSamplingInterval                  = 50                                  {product}
    ccstr PerfDataSaveFile                          =                                     {product}
     bool PerfDataSaveToFile                        = false                               {product}
     bool PerfDisableSharedMem                      = false                               {product}
     intx PerfMaxStringConstLength                  = 1024                                {product}
     intx PreInflateSpin                            = 10                                  {pd product}
     bool PreferInterpreterNativeStubs              = false                               {pd product}
     intx PrefetchCopyIntervalInBytes               = 576                                 {product}
     intx PrefetchFieldsAhead                       = 1                                   {product}
     intx PrefetchScanIntervalInBytes               = 576                                 {product}
     bool PreserveAllAnnotations                    = false                               {product}
     bool PreserveFramePointer                      = false                               {pd product}
    uintx PretenureSizeThreshold                    = 0                                   {product}
     bool PrintAdaptiveSizePolicy                   = false                               {product}
     bool PrintCMSInitiationStatistics              = false                               {product}
     intx PrintCMSStatistics                        = 0                                   {product}
     bool PrintClassHistogram                       = false                               {manageable}
     bool PrintClassHistogramAfterFullGC            = false                               {manageable}
     bool PrintClassHistogramBeforeFullGC           = false                               {manageable}
     bool PrintCodeCache                            = false                               {product}
     bool PrintCodeCacheOnCompilation               = false                               {product}
     bool PrintCommandLineFlags                     = false                               {product}
     bool PrintCompilation                          = false                               {product}
     bool PrintConcurrentLocks                      = false                               {manageable}
     intx PrintFLSCensus                            = 0                                   {product}
     intx PrintFLSStatistics                        = 0                                   {product}
     bool PrintFlagsFinal                          := true                                {product}
     bool PrintFlagsInitial                         = false                               {product}
     bool PrintGC                                   = true                                {manageable}
     bool PrintGCApplicationConcurrentTime          = false                               {product}
     bool PrintGCApplicationStoppedTime             = false                               {product}
     bool PrintGCCause                              = true                                {product}
     bool PrintGCDateStamps                        := true                                {manageable}
     bool PrintGCDetails                           := true                                {manageable}
     bool PrintGCID                                 = false                               {manageable}
     bool PrintGCTaskTimeStamps                     = false                               {product}
     bool PrintGCTimeStamps                         = false                               {manageable}
     bool PrintHeapAtGC                             = false                               {product rw}
     bool PrintHeapAtGCExtended                     = false                               {product rw}
     bool PrintHeapAtSIGBREAK                       = true                                {product}
     bool PrintJNIGCStalls                          = false                               {product}
     bool PrintJNIResolving                         = false                               {product}
     bool PrintOldPLAB                              = false                               {product}
     bool PrintOopAddress                           = false                               {product}
     bool PrintPLAB                                 = false                               {product}
     bool PrintParallelOldGCPhaseTimes              = false                               {product}
     bool PrintPromotionFailure                     = false                               {product}
     bool PrintReferenceGC                          = false                               {product}
     bool PrintSafepointStatistics                  = false                               {product}
     intx PrintSafepointStatisticsCount             = 300                                 {product}
     intx PrintSafepointStatisticsTimeout           = -1                                  {product}
     bool PrintSharedArchiveAndExit                 = false                               {product}
     bool PrintSharedDictionary                     = false                               {product}
     bool PrintSharedSpaces                         = false                               {product}
     bool PrintStringDeduplicationStatistics        = false                               {product}
     bool PrintStringTableStatistics                = false                               {product}
     bool PrintTLAB                                 = false                               {product}
     bool PrintTenuringDistribution                 = false                               {product}
     bool PrintTieredEvents                         = false                               {product}
     bool PrintVMOptions                            = false                               {product}
     bool PrintVMQWaitTime                          = false                               {product}
     bool PrintWarnings                             = true                                {product}
    uintx ProcessDistributionStride                 = 4                                   {product}
     bool ProfileInterpreter                        = true                                {pd product}
     bool ProfileIntervals                          = false                               {product}
     intx ProfileIntervalsTicks                     = 100                                 {product}
     intx ProfileMaturityPercentage                 = 20                                  {product}
     bool ProfileVM                                 = false                               {product}
     bool ProfilerPrintByteCodeStatistics           = false                               {product}
     bool ProfilerRecordPC                          = false                               {product}
    uintx PromotedPadding                           = 3                                   {product}
    uintx QueuedAllocationWarningCount              = 0                                   {product}
    uintx RTMRetryCount                             = 5                                   {ARCH product}
     bool RangeCheckElimination                     = true                                {product}
     intx ReadPrefetchInstr                         = 0                                   {ARCH product}
     bool ReassociateInvariants                     = true                                {C2 product}
     bool ReduceBulkZeroing                         = true                                {C2 product}
     bool ReduceFieldZeroing                        = true                                {C2 product}
     bool ReduceInitialCardMarks                    = true                                {C2 product}
     bool ReduceSignalUsage                         = false                               {product}
     intx RefDiscoveryPolicy                        = 0                                   {product}
     bool ReflectionWrapResolutionErrors            = true                                {product}
     bool RegisterFinalizersAtInit                  = true                                {product}
     bool RelaxAccessControlCheck                   = false                               {product}
    ccstr ReplayDataFile                            =                                     {product}
     bool RequireSharedSpaces                       = false                               {product}
    uintx ReservedCodeCacheSize                     = 251658240                           {pd product}
     bool ResizeOldPLAB                             = true                                {product}
     bool ResizePLAB                                = true                                {product}
     bool ResizeTLAB                                = true                                {pd product}
     bool RestoreMXCSROnJNICalls                    = false                               {product}
     bool RestrictContended                         = true                                {product}
     bool RewriteBytecodes                          = true                                {pd product}
     bool RewriteFrequentPairs                      = true                                {pd product}
     intx SafepointPollOffset                       = 256                                 {C1 pd product}
     intx SafepointSpinBeforeYield                  = 2000                                {product}
     bool SafepointTimeout                          = false                               {product}
     intx SafepointTimeoutDelay                     = 10000                               {product}
     bool ScavengeBeforeFullGC                      = true                                {product}
     intx SelfDestructTimer                         = 0                                   {product}
    uintx SharedBaseAddress                         = 34359738368                         {product}
    ccstr SharedClassListFile                       =                                     {product}
    uintx SharedMiscCodeSize                        = 122880                              {product}
    uintx SharedMiscDataSize                        = 4194304                             {product}
    uintx SharedReadOnlySize                        = 16777216                            {product}
    uintx SharedReadWriteSize                       = 16777216                            {product}
     bool ShowMessageBoxOnError                     = false                               {product}
     intx SoftRefLRUPolicyMSPerMB                   = 1000                                {product}
     bool SpecialEncodeISOArray                     = true                                {C2 product}
     bool SplitIfBlocks                             = true                                {C2 product}
     intx StackRedPages                             = 1                                   {pd product}
     intx StackShadowPages                          = 20                                  {pd product}
     bool StackTraceInThrowable                     = true                                {product}
     intx StackYellowPages                          = 2                                   {pd product}
     bool StartAttachListener                       = false                               {product}
     intx StarvationMonitorInterval                 = 200                                 {product}
     bool StressLdcRewrite                          = false                               {product}
    uintx StringDeduplicationAgeThreshold           = 3                                   {product}
    uintx StringTableSize                           = 60013                               {product}
     bool SuppressFatalErrorMessage                 = false                               {product}
    uintx SurvivorPadding                           = 3                                   {product}
    uintx SurvivorRatio                            := 8                                   {product}
     intx SuspendRetryCount                         = 50                                  {product}
     intx SuspendRetryDelay                         = 5                                   {product}
     intx SyncFlags                                 = 0                                   {product}
    ccstr SyncKnobs                                 =                                     {product}
     intx SyncVerbose                               = 0                                   {product}
    uintx TLABAllocationWeight                      = 35                                  {product}
    uintx TLABRefillWasteFraction                   = 64                                  {product}
    uintx TLABSize                                  = 0                                   {product}
     bool TLABStats                                 = true                                {product}
    uintx TLABWasteIncrement                        = 4                                   {product}
    uintx TLABWasteTargetPercent                    = 1                                   {product}
    uintx TargetPLABWastePct                        = 10                                  {product}
    uintx TargetSurvivorRatio                       = 50                                  {product}
    uintx TenuredGenerationSizeIncrement            = 20                                  {product}
    uintx TenuredGenerationSizeSupplement           = 80                                  {product}
    uintx TenuredGenerationSizeSupplementDecay      = 2                                   {product}
     intx ThreadPriorityPolicy                      = 0                                   {product}
     bool ThreadPriorityVerbose                     = false                               {product}
    uintx ThreadSafetyMargin                        = 52428800                            {product}
     intx ThreadStackSize                           = 1024                                {pd product}
    uintx ThresholdTolerance                        = 10                                  {product}
     intx Tier0BackedgeNotifyFreqLog                = 10                                  {product}
     intx Tier0InvokeNotifyFreqLog                  = 7                                   {product}
     intx Tier0ProfilingStartPercentage             = 200                                 {product}
     intx Tier23InlineeNotifyFreqLog                = 20                                  {product}
     intx Tier2BackEdgeThreshold                    = 0                                   {product}
     intx Tier2BackedgeNotifyFreqLog                = 14                                  {product}
     intx Tier2CompileThreshold                     = 0                                   {product}
     intx Tier2InvokeNotifyFreqLog                  = 11                                  {product}
     intx Tier3BackEdgeThreshold                    = 60000                               {product}
     intx Tier3BackedgeNotifyFreqLog                = 13                                  {product}
     intx Tier3CompileThreshold                     = 2000                                {product}
     intx Tier3DelayOff                             = 2                                   {product}
     intx Tier3DelayOn                              = 5                                   {product}
     intx Tier3InvocationThreshold                  = 200                                 {product}
     intx Tier3InvokeNotifyFreqLog                  = 10                                  {product}
     intx Tier3LoadFeedback                         = 5                                   {product}
     intx Tier3MinInvocationThreshold               = 100                                 {product}
     intx Tier4BackEdgeThreshold                    = 40000                               {product}
     intx Tier4CompileThreshold                     = 15000                               {product}
     intx Tier4InvocationThreshold                  = 5000                                {product}
     intx Tier4LoadFeedback                         = 3                                   {product}
     intx Tier4MinInvocationThreshold               = 600                                 {product}
     bool TieredCompilation                         = true                                {pd product}
     intx TieredCompileTaskTimeout                  = 50                                  {product}
     intx TieredRateUpdateMaxTime                   = 25                                  {product}
     intx TieredRateUpdateMinTime                   = 1                                   {product}
     intx TieredStopAtLevel                         = 4                                   {product}
     bool TimeLinearScan                            = false                               {C1 product}
     bool TraceBiasedLocking                        = false                               {product}
     bool TraceClassLoading                         = false                               {product rw}
     bool TraceClassLoadingPreorder                 = false                               {product}
     bool TraceClassPaths                           = false                               {product}
     bool TraceClassResolution                      = false                               {product}
     bool TraceClassUnloading                       = false                               {product rw}
     bool TraceDynamicGCThreads                     = false                               {product}
     bool TraceGen0Time                             = false                               {product}
     bool TraceGen1Time                             = false                               {product}
    ccstr TraceJVMTI                                =                                     {product}
     bool TraceLoaderConstraints                    = false                               {product rw}
     bool TraceMetadataHumongousAllocation          = false                               {product}
     bool TraceMonitorInflation                     = false                               {product}
     bool TraceParallelOldGCTasks                   = false                               {product}
     intx TraceRedefineClasses                      = 0                                   {product}
     bool TraceSafepointCleanupTime                 = false                               {product}
     bool TraceSharedLookupCache                    = false                               {product}
     bool TraceSuspendWaitFailures                  = false                               {product}
     intx TrackedInitializationLimit                = 50                                  {C2 product}
     bool TransmitErrorReport                       = false                               {product}
     bool TrapBasedNullChecks                       = false                               {pd product}
     bool TrapBasedRangeChecks                      = false                               {C2 pd product}
     intx TypeProfileArgsLimit                      = 2                                   {product}
    uintx TypeProfileLevel                          = 111                                 {pd product}
     intx TypeProfileMajorReceiverPercent           = 90                                  {C2 product}
     intx TypeProfileParmsLimit                     = 2                                   {product}
     intx TypeProfileWidth                          = 2                                   {product}
     intx UnguardOnExecutionViolation               = 0                                   {product}
     bool UnlinkSymbolsALot                         = false                               {product}
     bool Use486InstrsOnly                          = false                               {ARCH product}
     bool UseAES                                    = true                                {product}
     bool UseAESIntrinsics                          = true                                {product}
     intx UseAVX                                    = 1                                   {ARCH product}
     bool UseAdaptiveGCBoundary                     = false                               {product}
     bool UseAdaptiveGenerationSizePolicyAtMajorCollection  = true                                {product}
     bool UseAdaptiveGenerationSizePolicyAtMinorCollection  = true                                {product}
     bool UseAdaptiveNUMAChunkSizing                = true                                {product}
     bool UseAdaptiveSizeDecayMajorGCCost           = true                                {product}
     bool UseAdaptiveSizePolicy                     = false                               {product}
     bool UseAdaptiveSizePolicyFootprintGoal        = true                                {product}
     bool UseAdaptiveSizePolicyWithSystemGC         = false                               {product}
     bool UseAddressNop                             = true                                {ARCH product}
     bool UseAltSigs                                = false                               {product}
     bool UseAutoGCSelectPolicy                     = false                               {product}
     bool UseBMI1Instructions                       = false                               {ARCH product}
     bool UseBMI2Instructions                       = false                               {ARCH product}
     bool UseBiasedLocking                          = true                                {product}
     bool UseBimorphicInlining                      = true                                {C2 product}
     bool UseBoundThreads                           = true                                {product}
     bool UseCLMUL                                  = true                                {ARCH product}
     bool UseCMSBestFit                             = true                                {product}
     bool UseCMSCollectionPassing                   = true                                {product}
     bool UseCMSCompactAtFullCollection             = true                                {product}
     bool UseCMSInitiatingOccupancyOnly            := true                                {product}
     bool UseCRC32Intrinsics                        = true                                {product}
     bool UseCodeCacheFlushing                      = true                                {product}
     bool UseCompiler                               = true                                {product}
     bool UseCompilerSafepoints                     = true                                {product}
     bool UseCompressedClassPointers               := true                                {lp64_product}
     bool UseCompressedOops                        := true                                {lp64_product}
     bool UseConcMarkSweepGC                       := true                                {product}
     bool UseCondCardMark                          := true                                {C2 product}
     bool UseCountLeadingZerosInstruction           = false                               {ARCH product}
     bool UseCountTrailingZerosInstruction          = false                               {ARCH product}
     bool UseCountedLoopSafepoints                  = false                               {C2 product}
     bool UseCounterDecay                           = true                                {product}
     bool UseDivMod                                 = true                                {C2 product}
     bool UseDynamicNumberOfGCThreads               = false                               {product}
     bool UseFPUForSpilling                         = true                                {C2 product}
     bool UseFastAccessorMethods                    = false                               {product}
     bool UseFastEmptyMethods                       = false                               {product}
     bool UseFastJNIAccessors                       = true                                {product}
     bool UseFastStosb                              = true                                {ARCH product}
     bool UseG1GC                                   = false                               {product}
     bool UseGCLogFileRotation                      = false                               {product}
     bool UseGCOverheadLimit                        = true                                {product}
     bool UseGCTaskAffinity                         = false                               {product}
     bool UseHeavyMonitors                          = false                               {product}
     bool UseHugeTLBFS                              = false                               {product}
     bool UseInlineCaches                           = true                                {product}
     bool UseInterpreter                            = true                                {product}
     bool UseJumpTables                             = true                                {C2 product}
     bool UseLWPSynchronization                     = true                                {product}
     bool UseLargePages                             = false                               {pd product}
     bool UseLargePagesInMetaspace                  = false                               {product}
     bool UseLargePagesIndividualAllocation         = false                               {pd product}
     bool UseLinuxPosixThreadCPUClocks              = true                                {product}
     bool UseLockedTracing                          = false                               {product}
     bool UseLoopCounter                            = true                                {product}
     bool UseLoopInvariantCodeMotion                = true                                {C1 product}
     bool UseLoopPredicate                          = true                                {C2 product}
     bool UseMathExactIntrinsics                    = true                                {C2 product}
     bool UseMaximumCompactionOnSystemGC            = true                                {product}
     bool UseMembar                                 = false                               {pd product}
     bool UseMontgomeryMultiplyIntrinsic            = false                               {C2 product}
     bool UseMontgomerySquareIntrinsic              = false                               {C2 product}
     bool UseMulAddIntrinsic                        = false                               {C2 product}
     bool UseMultiplyToLenIntrinsic                 = true                                {C2 product}
     bool UseNUMA                                   = false                               {product}
     bool UseNUMAInterleaving                       = false                               {product}
     bool UseNewLongLShift                          = false                               {ARCH product}
     bool UseOSErrorReporting                       = false                               {pd product}
     bool UseOldInlining                            = true                                {C2 product}
     bool UseOnStackReplacement                     = true                                {pd product}
     bool UseOnlyInlinedBimorphic                   = true                                {C2 product}
     bool UseOprofile                               = false                               {product}
     bool UseOptoBiasInlining                       = true                                {C2 product}
     bool UsePSAdaptiveSurvivorSizePolicy           = true                                {product}
     bool UseParNewGC                              := true                                {product}
     bool UseParallelGC                             = false                               {product}
     bool UseParallelOldGC                          = false                               {product}
     bool UsePerfData                               = true                                {product}
     bool UsePopCountInstruction                    = true                                {product}
     bool UseRDPCForConstantTableBase               = false                               {C2 product}
     bool UseRTMDeopt                               = false                               {ARCH product}
     bool UseRTMLocking                             = false                               {ARCH product}
     bool UseSHA                                    = false                               {product}
     bool UseSHA1Intrinsics                         = false                               {product}
     bool UseSHA256Intrinsics                       = false                               {product}
     bool UseSHA512Intrinsics                       = false                               {product}
     bool UseSHM                                    = false                               {product}
     intx UseSSE                                    = 4                                   {product}
     bool UseSSE42Intrinsics                        = true                                {product}
     bool UseSerialGC                               = false                               {product}
     bool UseSharedSpaces                           = false                               {product}
     bool UseSignalChaining                         = true                                {product}
     bool UseSquareToLenIntrinsic                   = false                               {C2 product}
     bool UseStoreImmI16                            = false                               {ARCH product}
     bool UseStringDeduplication                    = false                               {product}
     bool UseSuperWord                              = true                                {C2 product}
     bool UseTLAB                                  := true                                {pd product}
     bool UseThreadPriorities                       = true                                {pd product}
     bool UseTransparentHugePages                   = false                               {product}
     bool UseTypeProfile                            = true                                {product}
     bool UseTypeSpeculation                        = true                                {C2 product}
     bool UseUnalignedLoadStores                    = true                                {ARCH product}
     bool UseVMInterruptibleIO                      = false                               {product}
     bool UseXMMForArrayCopy                        = true                                {product}
     bool UseXmmI2D                                 = false                               {ARCH product}
     bool UseXmmI2F                                 = false                               {ARCH product}
     bool UseXmmLoadAndClearUpper                   = true                                {ARCH product}
     bool UseXmmRegToRegMoveAll                     = true                                {ARCH product}
     bool VMThreadHintNoPreempt                     = false                               {product}
     intx VMThreadPriority                          = -1                                  {product}
     intx VMThreadStackSize                         = 1024                                {pd product}
     intx ValueMapInitialSize                       = 11                                  {C1 product}
     intx ValueMapMaxLoopSize                       = 8                                   {C1 product}
     intx ValueSearchLimit                          = 1000                                {C2 product}
     bool VerifyMergedCPBytecodes                   = true                                {product}
     bool VerifySharedSpaces                        = false                               {product}
     intx WorkAroundNPTLTimedWaitHang               = 1                                   {product}
    uintx YoungGenerationSizeIncrement              = 20                                  {product}
    uintx YoungGenerationSizeSupplement             = 80                                  {product}
    uintx YoungGenerationSizeSupplementDecay        = 8                                   {product}
    uintx YoungPLABSize                             = 1024                                {product}
     bool ZeroTLAB                                  = false                               {product}
     intx hashCode                                  = 5                                   {product}
2017-10-30T23:01:40.065+0000: [GC (Allocation Failure) 2017-10-30T23:01:40.065+0000: [ParNew: 32320K->2487K(36288K), 0.0061254 secs] 32320K->2487K(116864K), 0.0061917 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:40.523+0000: [GC (Allocation Failure) 2017-10-30T23:01:40.523+0000: [ParNew: 34807K->1899K(36288K), 0.0197919 secs] 34807K->4213K(116864K), 0.0198487 secs] [Times: user=0.02 sys=0.01, real=0.02 secs] 
2017-10-30T23:01:40.694+0000: [GC (Allocation Failure) 2017-10-30T23:01:40.694+0000: [ParNew: 34219K->650K(36288K), 0.0051841 secs] 36533K->3316K(116864K), 0.0052389 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:40.875+0000: [GC (Allocation Failure) 2017-10-30T23:01:40.876+0000: [ParNew: 32970K->270K(36288K), 0.0032670 secs] 35636K->2974K(116864K), 0.0033206 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:41.275+0000: [GC (Allocation Failure) 2017-10-30T23:01:41.275+0000: [ParNew: 32590K->1668K(36288K), 0.0077101 secs] 35294K->4423K(116864K), 0.0077641 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:41.535+0000: [GC (Allocation Failure) 2017-10-30T23:01:41.535+0000: [ParNew: 33988K->1111K(36288K), 0.0056752 secs] 36743K->4775K(116864K), 0.0057312 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:41.766+0000: [GC (Allocation Failure) 2017-10-30T23:01:41.766+0000: [ParNew: 33431K->842K(36288K), 0.0033793 secs] 37095K->4760K(116864K), 0.0034348 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:42.052+0000: [GC (Allocation Failure) 2017-10-30T23:01:42.053+0000: [ParNew: 33162K->541K(36288K), 0.0054503 secs] 37080K->4637K(116864K), 0.0055042 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:42.122+0000: [GC (Allocation Failure) 2017-10-30T23:01:42.122+0000: [ParNew: 32861K->151K(36288K), 0.0022896 secs] 36957K->4395K(116864K), 0.0023493 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:42.217+0000: [GC (Allocation Failure) 2017-10-30T23:01:42.217+0000: [ParNew: 32471K->63K(36288K), 0.0017920 secs] 36715K->4327K(116864K), 0.0018510 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
                                                                                                                                                                                                        
                         `;;;;;;`                                                                                                                                                                       
                       .;;;;;;;;;;,                                                                                                                                                                     
                      ;;;;;;;;;;;;;;                                                                     ,;    `,                                      `:                                            :;`
                     ;;;;;;;;;;;;;;;;                                                                  ;;;;   :;;;.                                    ;;                                            :;`
                    ;;;;;;;;;;;;;;;;;;                                                                 ;;;;   ;;;;;                                    ;;                                            :;`
                   ;;;;;;;;;;;;;;;;;;;;                                                                ;;;;   ;;;;;                                    ;;                                            :;`
                  .;;;;;;;;;;;;;;;;;;;;.                                                               ;;;;   ;;;;:                                    ;;                                            :;`
           ;;;;;  ;;;;;;;;;;;;;;;;;;;;;;                                                               ;;;;    ;;;                                     ;;                                            :;`
          ;;;;;;;.;;;;;;;;;;;;;;;;;;;;;;`                                                              ;;;;                                            ;;                                            :;`
         ;;;;;;;;;;;;;;;;;;;;:,:;;;;;;;;;                .:::`                       ,::.          ,,` ;;;;                ,:,`               .,,      ;;        .,`                            .,`  :;`
        `;;;;;;;;;;;;;;;;;       :;;;;;;;              :;;;;;;;; ;;;;;     ;;;;:  `;;;;;;;;     .;;;;;;;;;;   :;;;,     :;;;;;;;;;`         ;;;;;;;    ;;      ;;;;;;;      ;;        ;,      ;;;;;;;:;`
        :;;;;;;;;;;;;;;;         .;;;;;;;             :;;;;;;;;: `;;;;     ;;;;.  ;;;;;;;;;    ,;;;;;;;;;;;   :;;;,    ;;;;;;;;;;;`        ;;;,``:;    ;;     ;;;.`,;;;     ;;        ;,     ;;;,`,;;;;`
        ;;;;;;;;;;;;;;           .;;;;;;;             ;;;;;;;;;`  ;;;;`    ;;;;  ;;;;;;;;;;    ;;;;;;;;;;;;   :;;;,   :;;;;;;;;;;;`       ;;:          ;;    ;;:     ;;:    ;;        ;,    ;;:      ;;`
        :;;;;;;;;;;;;            .;;;;;;;            `;;;;   `;   ;;;;:   `;;;;  ;;;;.   :,   ;;;;;;`,;;;;;   :;;;,   ;;;;;`  ;;;;`      `;;           ;;   .;;       ;;    ;;        ;,   `;;       :;`
      `;;;;;;;;;;;;;             .;;;;;;;            .;;;;        .;;;;   :;;;,  ;;;;         ;;;;,    ;;;;   :;;;,  ,;;;;    ;;;;`      ;;`           ;;   ;;`       ,;,   ;;        ;,   ;;`       :;`
     ;;;;;;;;;;;;;:              :;;;;;;;;;.          ;;;;:        ;;;;   ;;;;   ;;;;;        ;;;;     ;;;;   :;;;,  ;;;;:    ;;;;`      ;;            ;;   ;;        `;;   ;;        ;,   ;;        :;`
    ;;;;;;;;;;;;;:               ;;;;;;;;;;;;,        ;;;;;;;      ;;;;.  ;;;;   ;;;;;;;`    .;;;;     ;;;;   :;;;,  ;;;;`    ;;;;`      ;;            ;;   ;;         ;;   ;;        ;,   ;;        :;`
   ;;;;;;;;;;;;;;`               ;;;;;;;;;;;;;;       .;;;;;;;:    .;;;; .;;;:    ;;;;;;;;   .;;;;     ;;;;   :;;;,  ;;;;`    ;;;;`      ;;            ;;   ;;         ;;   ;;        ;,   ;;        :;`
  .;;;;;;;;;;;;;;;              `;;;;;;;;;;;;;;,       .;;;;;;;:    ;;;; ;;;;`     ;;;;;;;;  .;;;;     ;;;;   :;;;,  ;;;;`    ;;;;`      ;;            ;;   ;;         ;;   ;;        ;,   ;;        :;`
  ;;;;;;;;;;;;;;;;;             ;;;;;;;;;;;;;;;;         .;;;;;;    ;;;;.;;;;        ;;;;;;, `;;;;     ;;;;   :;;;,  ;;;;;    ;;;;`      ;;            ;;   ;;         ;;   ;;        ;,   ;;        :;`
  ;;;;;;;;;;;;;;;;;;            ;;;;;;;;;;;;;;;;,          .;;;;`   `;;;;;;;:          ;;;;;  ;;;;`    ;;;;   :;;;,  ,;;;;`   ;;;;`      ;;            ;;   ;;        `;;   ;;        ;,   ;;        :;`
 `;;;;;;;;;;;;;;;;;;`          ;;;;;;;;;;;;;;;;;;           ;;;;.    ;;;;;;;           `;;;;  ;;;;;    ;;;;   :;;;,   ;;;;;;;;;;;;`      ;;.           ;;   ;;`       :;,   :;`       ;,   ;;,       :;`
 .;;;;;;;;;;;;;;;;;;.          ;;;;;;;;;;;;;;;;;;     ;;:``,;;;;`    ,;;;;;;     ;;;.`.;;;;;  ,;;;;;;:;;;;;   :;;;,   :;;;;;;;;;;;`       ;;           ;;   `;;       ;;    `;;       ;,    ;;       :;`
 .;;;;;;;;;;;;;;;;;;          ;;;;;;;;;;;;;;;;;;;    .;;;;;;;;;;      ;;;;;.     ;;;;;;;;;;.   ;;;;;;;;;;;;   :;;;,    ;;;;;;;;;;;`       ;;;          ;;    ;;;     ;;,     ;;.    `;;,    ;;;     ,;;`
 .;;;;;;;;;;;;;;;;;  :;`     ,;;;;;;;;;;;;;;;;;;;    ;;;;;;;;;;,      :;;;;     `;;;;;;;;;;     ;;;;;;;;;;;   :;;;,     `;;;;,;;;;`        ;;;;;;;;`   ;;     ;;;;:;;;;      .;;;;;;;;;,     ;;;;;;;;;;`
  ;;;;;;;;;;;;;;;   ,;;;.    ;;;;;;;;;;;;;;;;;;;;    ,;;;;;;;;`       .;;;;     `;;;;;;;;:       :;;;;;;;;;   :;;;,           ;;;;`         :;;;;;;.   ;;      ;;;;;;,        `;;;;;;`;,      .;;;;;;:;`
  ;;;;;;;;;;;;;;   .;;;;;`  ;;;;;;;;;;;;;;;;;;;;;        ``           ;;;;`          `                                        ;;;;                                                                   `  
  .;;;;;;;;;;;;    ;;;;;;;`;;;;;;;;;;;;;;;;;;;;;.                 , `;;;;;                                            :;,   .;;;;;                                                                      
   ;;;;;;;;;;;     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;                 .;;;;;;;`                                            ;;;;;;;;;;;.                                                                      
    ;;;;;;;;;     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;                  ;;;;;;;:                                             ;;;;;;;;;;;                                                                       
     ;;;;;;;`    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;                   ;;;;;;;                                              ;;;;;;;;;:                                                                        
      ,;;;;.    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;:                     .::,                                                  .;;;:.                                                                          
                                                                                                                                                                                                        

Sysdigcloud Backend running on top of Spring Boot  (v1.5.4.RELEASE)
2017-10-30T23:01:42.476+0000: [GC (Allocation Failure) 2017-10-30T23:01:42.476+0000: [ParNew: 32383K->536K(36288K), 0.0032068 secs] 36647K->4823K(116864K), 0.0032596 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:42.637+0000: [GC (Allocation Failure) 2017-10-30T23:01:42.637+0000: [ParNew: 32856K->1013K(36288K), 0.0034764 secs] 37143K->5566K(116864K), 0.0035434 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:42.810+0000: [GC (Allocation Failure) 2017-10-30T23:01:42.810+0000: [ParNew: 33333K->1403K(36288K), 0.0508956 secs] 37886K->6080K(116864K), 0.0509621 secs] [Times: user=0.04 sys=0.00, real=0.05 secs] 
2017-10-30 23:01:43.014  INFO 145 --- [           main] com.draios.Backend                       : Starting Backend on sysdigcloud-api-2039094698-hhfdm with PID 145 (/opt/draios-backend-1.0.0.jar started by root in /)
2017-10-30 23:01:43.026  INFO 145 --- [           main] com.draios.Backend                       : The following profiles are active: onpremise,api
2017-10-30T23:01:43.087+0000: [GC (Allocation Failure) 2017-10-30T23:01:43.088+0000: [ParNew: 33723K->1349K(36288K), 0.0067720 secs] 38400K->6197K(116864K), 0.0078510 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:43.282+0000: [GC (Allocation Failure) 2017-10-30T23:01:43.282+0000: [ParNew: 33669K->1052K(36288K), 0.0080337 secs] 38517K->6194K(116864K), 0.0080856 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30 23:01:43.437  INFO 145 --- [kground-preinit] o.h.validator.internal.util.Version      : HV000001: Hibernate Validator 5.3.5.Final
2017-10-30T23:01:43.500+0000: [GC (Allocation Failure) 2017-10-30T23:01:43.500+0000: [ParNew: 33372K->1233K(36288K), 0.0041676 secs] 38514K->6724K(116864K), 0.0042256 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:43.653+0000: [GC (Allocation Failure) 2017-10-30T23:01:43.653+0000: [ParNew: 33553K->928K(36288K), 0.0087978 secs] 39044K->7014K(116864K), 0.0088607 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:43.957+0000: [GC (Allocation Failure) 2017-10-30T23:01:43.957+0000: [ParNew: 33248K->1517K(36288K), 0.0062543 secs] 39334K->7973K(116864K), 0.0063180 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30 23:01:44.175  INFO 145 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@7de26db8: startup date [Mon Oct 30 23:01:44 UTC 2017]; root of context hierarchy
2017-10-30T23:01:44.206+0000: [GC (Allocation Failure) 2017-10-30T23:01:44.206+0000: [ParNew: 33837K->1236K(36288K), 0.0089919 secs] 40293K->8775K(116864K), 0.0090684 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:44.216+0000: [GC (CMS Initial Mark) [1 CMS-initial-mark: 7538K(80576K)] 9428K(116864K), 0.0017434 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:44.217+0000: [CMS-concurrent-mark-start]
2017-10-30T23:01:44.257+0000: [CMS-concurrent-mark: 0.040/0.040 secs] [Times: user=0.07 sys=0.00, real=0.04 secs] 
2017-10-30T23:01:44.257+0000: [CMS-concurrent-preclean-start]
2017-10-30T23:01:44.258+0000: [CMS-concurrent-preclean: 0.001/0.001 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:44.258+0000: [CMS-concurrent-abortable-preclean-start]
2017-10-30T23:01:44.367+0000: [GC (Allocation Failure) 2017-10-30T23:01:44.367+0000: [ParNew: 33556K->634K(36288K), 0.0084469 secs] 41095K->8608K(116864K), 0.0085118 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:44.489+0000: [CMS-concurrent-abortable-preclean: 0.065/0.231 secs] [Times: user=0.43 sys=0.02, real=0.23 secs] 
2017-10-30T23:01:44.490+0000: [GC (CMS Final Remark) [YG occupancy: 18542 K (36288 K)]2017-10-30T23:01:44.490+0000: [Rescan (parallel) , 0.0111670 secs]2017-10-30T23:01:44.502+0000: [weak refs processing, 0.0000351 secs]2017-10-30T23:01:44.502+0000: [class unloading, 0.0027571 secs]2017-10-30T23:01:44.504+0000: [scrub symbol table, 0.0033202 secs]2017-10-30T23:01:44.508+0000: [scrub string table, 0.0006030 secs][1 CMS-remark: 7974K(80576K)] 26516K(116864K), 0.0182956 secs] [Times: user=0.04 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:44.509+0000: [CMS-concurrent-sweep-start]
2017-10-30T23:01:44.514+0000: [CMS-concurrent-sweep: 0.005/0.005 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:44.514+0000: [CMS-concurrent-reset-start]
2017-10-30T23:01:44.523+0000: [CMS-concurrent-reset: 0.009/0.009 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:44.694+0000: [GC (Allocation Failure) 2017-10-30T23:01:44.694+0000: [ParNew: 32954K->1429K(36288K), 0.0065946 secs] 40519K->9105K(116864K), 0.0066519 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:45.014+0000: [GC (Allocation Failure) 2017-10-30T23:01:45.014+0000: [ParNew: 33749K->2643K(36288K), 0.0067373 secs] 41425K->11504K(116864K), 0.0067954 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:45.436+0000: [GC (Allocation Failure) 2017-10-30T23:01:45.436+0000: [ParNew: 34963K->3967K(36288K), 0.0166839 secs] 43824K->14716K(116864K), 0.0167684 secs] [Times: user=0.03 sys=0.00, real=0.02 secs] 
2017-10-30T23:01:45.731+0000: [GC (Allocation Failure) 2017-10-30T23:01:45.731+0000: [ParNew: 36287K->3967K(36288K), 0.0169544 secs] 47036K->16482K(116864K), 0.0170143 secs] [Times: user=0.03 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:46.049+0000: [GC (Allocation Failure) 2017-10-30T23:01:46.049+0000: [ParNew: 36287K->3968K(36288K), 0.0121663 secs] 48802K->18957K(116864K), 0.0122309 secs] [Times: user=0.03 sys=0.00, real=0.02 secs] 
2017-10-30T23:01:46.299+0000: [GC (Allocation Failure) 2017-10-30T23:01:46.300+0000: [ParNew: 36288K->3967K(36288K), 0.0064784 secs] 51277K->19691K(116864K), 0.0065468 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:46.556+0000: [GC (Allocation Failure) 2017-10-30T23:01:46.556+0000: [ParNew: 36287K->3967K(36288K), 0.0067632 secs] 52011K->20203K(116864K), 0.0068243 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:46.945+0000: [GC (Allocation Failure) 2017-10-30T23:01:46.945+0000: [ParNew: 36287K->3968K(36288K), 0.0150500 secs] 52523K->21007K(116864K), 0.0151133 secs] [Times: user=0.03 sys=0.00, real=0.02 secs] 
2017-10-30T23:01:47.076+0000: [GC (Allocation Failure) 2017-10-30T23:01:47.076+0000: [ParNew: 36288K->2360K(36288K), 0.0110366 secs] 53327K->21438K(116864K), 0.0110984 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:47.171+0000: [GC (Allocation Failure) 2017-10-30T23:01:47.171+0000: [ParNew: 34680K->647K(36288K), 0.0041363 secs] 53758K->20118K(116864K), 0.0041924 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:47.251+0000: [GC (Allocation Failure) 2017-10-30T23:01:47.251+0000: [ParNew: 32967K->596K(36288K), 0.0045633 secs] 52438K->20285K(116864K), 0.0046296 secs] [Times: user=0.00 sys=0.01, real=0.00 secs] 
2017-10-30T23:01:47.370+0000: [GC (Allocation Failure) 2017-10-30T23:01:47.370+0000: [ParNew: 32916K->1369K(36288K), 0.0037785 secs] 52605K->21267K(116864K), 0.0038388 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:47.490+0000: [GC (Allocation Failure) 2017-10-30T23:01:47.490+0000: [ParNew: 33689K->1351K(36288K), 0.0040907 secs] 53587K->21614K(116864K), 0.0041837 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:47.595+0000: [GC (Allocation Failure) 2017-10-30T23:01:47.595+0000: [ParNew: 33671K->776K(36288K), 0.0066998 secs] 53934K->21395K(116864K), 0.0067576 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:47.695+0000: [GC (Allocation Failure) 2017-10-30T23:01:47.695+0000: [ParNew: 33096K->620K(36288K), 0.0034404 secs] 53715K->21514K(116864K), 0.0035017 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:47.810+0000: [GC (Allocation Failure) 2017-10-30T23:01:47.810+0000: [ParNew: 32940K->946K(36288K), 0.0035468 secs] 53834K->22096K(116864K), 0.0036066 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:47.989+0000: [GC (Allocation Failure) 2017-10-30T23:01:47.989+0000: [ParNew: 33266K->1606K(36288K), 0.0045084 secs] 54416K->23078K(116864K), 0.0045930 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:48.098+0000: [GC (Allocation Failure) 2017-10-30T23:01:48.098+0000: [ParNew: 33926K->1100K(36288K), 0.0107372 secs] 55398K->22973K(116864K), 0.0108180 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:48.218+0000: [GC (Allocation Failure) 2017-10-30T23:01:48.218+0000: [ParNew: 33420K->1017K(36288K), 0.0085834 secs] 55293K->23349K(116864K), 0.0086379 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:48.332+0000: [GC (Allocation Failure) 2017-10-30T23:01:48.332+0000: [ParNew: 33337K->1196K(36288K), 0.0054268 secs] 55669K->23991K(116864K), 0.0054793 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:48.474+0000: [GC (Allocation Failure) 2017-10-30T23:01:48.474+0000: [ParNew: 33516K->1328K(36288K), 0.0072660 secs] 56311K->24620K(116864K), 0.0073238 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:48.607+0000: [GC (Allocation Failure) 2017-10-30T23:01:48.607+0000: [ParNew: 33648K->905K(36288K), 0.0044425 secs] 56940K->24730K(116864K), 0.0045010 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:48.689+0000: [GC (Allocation Failure) 2017-10-30T23:01:48.689+0000: [ParNew: 33225K->375K(36288K), 0.0037835 secs] 57050K->24350K(116864K), 0.0038455 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:48.823+0000: [GC (Allocation Failure) 2017-10-30T23:01:48.823+0000: [ParNew: 32695K->1299K(36288K), 0.0083491 secs] 56670K->25354K(116864K), 0.0084542 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:49.207+0000: [GC (Allocation Failure) 2017-10-30T23:01:49.207+0000: [ParNew: 33619K->3967K(36288K), 0.0153348 secs] 57674K->29467K(116864K), 0.0153941 secs] [Times: user=0.03 sys=0.00, real=0.02 secs] 
2017-10-30T23:01:49.473+0000: [GC (Allocation Failure) 2017-10-30T23:01:49.473+0000: [ParNew: 36287K->3262K(36288K), 0.0085425 secs] 61787K->29727K(116864K), 0.0086017 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:49.585+0000: [GC (Allocation Failure) 2017-10-30T23:01:49.585+0000: [ParNew: 35582K->917K(36288K), 0.0063882 secs] 62047K->27822K(116864K), 0.0064434 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:49.683+0000: [GC (Allocation Failure) 2017-10-30T23:01:49.683+0000: [ParNew: 33237K->498K(36288K), 0.0089132 secs] 60142K->27740K(116864K), 0.0089646 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:49.780+0000: [GC (Allocation Failure) 2017-10-30T23:01:49.780+0000: [ParNew: 32818K->376K(36288K), 0.0041767 secs] 60060K->27798K(116864K), 0.0042316 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:49.920+0000: [GC (Allocation Failure) 2017-10-30T23:01:49.920+0000: [ParNew: 32696K->475K(36288K), 0.0055426 secs] 60118K->28109K(116864K), 0.0055943 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:50.065+0000: [GC (Allocation Failure) 2017-10-30T23:01:50.065+0000: [ParNew: 32795K->1145K(36288K), 0.0082015 secs] 60429K->29023K(116864K), 0.0082572 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:50.325+0000: [GC (Allocation Failure) 2017-10-30T23:01:50.325+0000: [ParNew: 33465K->3967K(36288K), 0.0060219 secs] 61343K->32804K(116864K), 0.0060855 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:50.566+0000: [GC (Allocation Failure) 2017-10-30T23:01:50.566+0000: [ParNew: 36287K->2737K(36288K), 0.0107533 secs] 65124K->32163K(116864K), 0.0108122 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30 23:01:50.670  INFO 145 --- [           main] o.s.b.f.xml.XmlBeanDefinitionReader      : Loading XML bean definitions from class path resource [scheduler.xml]
2017-10-30T23:01:50.722+0000: [GC (Allocation Failure) 2017-10-30T23:01:50.722+0000: [ParNew: 35057K->816K(36288K), 0.0060827 secs] 64483K->30761K(116864K), 0.0061374 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:50.838+0000: [GC (Allocation Failure) 2017-10-30T23:01:50.838+0000: [ParNew: 33136K->501K(36288K), 0.0049927 secs] 63081K->30718K(116864K), 0.0050473 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:50.968+0000: [GC (Allocation Failure) 2017-10-30T23:01:50.968+0000: [ParNew: 32821K->545K(36288K), 0.0048721 secs] 63038K->30828K(116864K), 0.0049235 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:51.237+0000: [GC (Allocation Failure) 2017-10-30T23:01:51.237+0000: [ParNew: 32865K->939K(36288K), 0.0037857 secs] 63148K->31369K(116864K), 0.0038432 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:51.417+0000: [GC (Allocation Failure) 2017-10-30T23:01:51.417+0000: [ParNew: 33259K->1222K(36288K), 0.0050979 secs] 63689K->32088K(116864K), 0.0051557 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:51.663+0000: [GC (Allocation Failure) 2017-10-30T23:01:51.663+0000: [ParNew: 33542K->1547K(36288K), 0.0056314 secs] 64408K->32835K(116864K), 0.0057107 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:51.857+0000: [GC (Allocation Failure) 2017-10-30T23:01:51.858+0000: [ParNew: 33867K->1262K(36288K), 0.0136245 secs] 65155K->33060K(116864K), 0.0136820 secs] [Times: user=0.02 sys=0.00, real=0.02 secs] 
2017-10-30 23:01:52.147  INFO 145 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2017-10-30T23:01:52.215+0000: [GC (Allocation Failure) 2017-10-30T23:01:52.215+0000: [ParNew: 33582K->1194K(36288K), 0.0099588 secs] 65380K->33419K(116864K), 0.0100164 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:52.476+0000: [GC (Allocation Failure) 2017-10-30T23:01:52.476+0000: [ParNew: 33514K->2782K(36288K), 0.0063716 secs] 65739K->35505K(116864K), 0.0064257 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:52.731+0000: [GC (Allocation Failure) 2017-10-30T23:01:52.731+0000: [ParNew: 35102K->3967K(36288K), 0.0133059 secs] 67825K->39778K(116864K), 0.0133661 secs] [Times: user=0.03 sys=0.01, real=0.01 secs] 
2017-10-30T23:01:52.855+0000: [GC (Allocation Failure) 2017-10-30T23:01:52.855+0000: [ParNew: 36287K->1771K(36288K), 0.0033364 secs] 72098K->37639K(116864K), 0.0033919 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:53.013+0000: [GC (Allocation Failure) 2017-10-30T23:01:53.013+0000: [ParNew: 34091K->2577K(36288K), 0.0040157 secs] 69959K->38480K(116864K), 0.0040729 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:53.186+0000: [GC (Allocation Failure) 2017-10-30T23:01:53.187+0000: [ParNew: 34897K->1791K(36288K), 0.0036983 secs] 70800K->37715K(116864K), 0.0037562 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:53.353+0000: [GC (Allocation Failure) 2017-10-30T23:01:53.353+0000: [ParNew: 34111K->2170K(36288K), 0.0056592 secs] 70035K->38095K(116864K), 0.0057175 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:53.461+0000: [GC (Allocation Failure) 2017-10-30T23:01:53.461+0000: [ParNew: 34490K->768K(36288K), 0.0033234 secs] 70415K->36876K(116864K), 0.0033818 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:53.587+0000: [GC (Allocation Failure) 2017-10-30T23:01:53.587+0000: [ParNew: 33088K->1295K(36288K), 0.0042435 secs] 69196K->37525K(116864K), 0.0043064 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:53.706+0000: [GC (Allocation Failure) 2017-10-30T23:01:53.706+0000: [ParNew: 33615K->1280K(36288K), 0.0062536 secs] 69845K->37766K(116864K), 0.0063072 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:53.828+0000: [GC (Allocation Failure) 2017-10-30T23:01:53.828+0000: [ParNew: 33600K->947K(36288K), 0.0049752 secs] 70086K->37548K(116864K), 0.0050295 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:53.978+0000: [GC (Allocation Failure) 2017-10-30T23:01:53.978+0000: [ParNew: 33267K->988K(36288K), 0.0029065 secs] 69868K->37725K(116864K), 0.0029679 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:54.085+0000: [GC (Allocation Failure) 2017-10-30T23:01:54.085+0000: [ParNew: 33308K->1061K(36288K), 0.0032841 secs] 70045K->37932K(116864K), 0.0033428 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:54.173+0000: [GC (Allocation Failure) 2017-10-30T23:01:54.173+0000: [ParNew: 33381K->1095K(36288K), 0.0029027 secs] 70252K->38091K(116864K), 0.0029644 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:54.272+0000: [GC (Allocation Failure) 2017-10-30T23:01:54.272+0000: [ParNew: 33415K->1022K(36288K), 0.0029499 secs] 70411K->38173K(116864K), 0.0030076 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:54.349+0000: [GC (Allocation Failure) 2017-10-30T23:01:54.349+0000: [ParNew: 33342K->995K(36288K), 0.0035067 secs] 70493K->38263K(116864K), 0.0035652 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:54.425+0000: [GC (Allocation Failure) 2017-10-30T23:01:54.425+0000: [ParNew: 33315K->958K(36288K), 0.0033061 secs] 70583K->38346K(116864K), 0.0033733 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:54.523+0000: [GC (Allocation Failure) 2017-10-30T23:01:54.523+0000: [ParNew: 33278K->1130K(36288K), 0.0033329 secs] 70666K->38627K(116864K), 0.0033914 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:54.725+0000: [GC (Allocation Failure) 2017-10-30T23:01:54.725+0000: [ParNew: 33450K->3376K(36288K), 0.0078260 secs] 70947K->40947K(116864K), 0.0078888 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:54.907+0000: [GC (Allocation Failure) 2017-10-30T23:01:54.907+0000: [ParNew: 35696K->3013K(36288K), 0.0081474 secs] 73267K->40635K(116864K), 0.0082143 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:55.129+0000: [GC (Allocation Failure) 2017-10-30T23:01:55.129+0000: [ParNew: 35333K->1698K(36288K), 0.0084253 secs] 72955K->39887K(116864K), 0.0084886 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:55.585+0000: [GC (Allocation Failure) 2017-10-30T23:01:55.585+0000: [ParNew: 34018K->1378K(36288K), 0.0066231 secs] 72207K->40198K(116864K), 0.0066816 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:55.807+0000: [GC (Allocation Failure) 2017-10-30T23:01:55.807+0000: [ParNew: 33698K->1216K(36288K), 0.0129328 secs] 72518K->40817K(116864K), 0.0130012 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:55.975+0000: [GC (Allocation Failure) 2017-10-30T23:01:55.975+0000: [ParNew: 33536K->1224K(36288K), 0.0120971 secs] 73137K->41404K(116864K), 0.0121618 secs] [Times: user=0.03 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:56.097+0000: [GC (Allocation Failure) 2017-10-30T23:01:56.097+0000: [ParNew: 33544K->919K(36288K), 0.0076519 secs] 73724K->42063K(116864K), 0.0077164 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:56.105+0000: [GC (CMS Initial Mark) [1 CMS-initial-mark: 41143K(80576K)] 42063K(116864K), 0.0014242 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:56.106+0000: [CMS-concurrent-mark-start]
2017-10-30T23:01:56.267+0000: [CMS-concurrent-mark: 0.161/0.161 secs] [Times: user=0.29 sys=0.00, real=0.16 secs] 
2017-10-30T23:01:56.267+0000: [GC (Allocation Failure) 2017-10-30T23:01:56.268+0000: [ParNew: 33239K->323K(36288K), 0.0072645 secs] 74383K->41643K(116864K), 0.0073034 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:56.278+0000: [CMS-concurrent-preclean-start]
2017-10-30T23:01:56.281+0000: [CMS-concurrent-preclean: 0.002/0.003 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:56.285+0000: [GC (CMS Final Remark) [YG occupancy: 2262 K (36288 K)]2017-10-30T23:01:56.285+0000: [Rescan (parallel) , 0.0028039 secs]2017-10-30T23:01:56.288+0000: [weak refs processing, 0.0000339 secs]2017-10-30T23:01:56.288+0000: [class unloading, 0.0067852 secs]2017-10-30T23:01:56.294+0000: [scrub symbol table, 0.0074810 secs]2017-10-30T23:01:56.302+0000: [scrub string table, 0.0014762 secs][1 CMS-remark: 41320K(80576K)] 43582K(116864K), 0.0189974 secs] [Times: user=0.04 sys=0.00, real=0.02 secs] 
2017-10-30T23:01:56.304+0000: [CMS-concurrent-sweep-start]
2017-10-30T23:01:56.349+0000: [CMS-concurrent-sweep: 0.046/0.046 secs] [Times: user=0.09 sys=0.00, real=0.04 secs] 
2017-10-30T23:01:56.350+0000: [CMS-concurrent-reset-start]
2017-10-30T23:01:56.361+0000: [CMS-concurrent-reset: 0.011/0.011 secs] [Times: user=0.02 sys=0.00, real=0.02 secs] 
2017-10-30 23:01:56.379  INFO 145 --- [           main] com.draios.conf.AppConfig                : Loading SYSDIG CLOUD server O|A|k9os2, active profiles: onpremise, api
2017-10-30 23:01:56.383  INFO 145 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'appConfig' of type [com.draios.conf.AppConfig$$EnhancerBySpringCGLIB$$b9acc885] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2017-10-30T23:01:56.571+0000: [GC (Allocation Failure) 2017-10-30T23:01:56.571+0000: [ParNew: 32643K->988K(36288K), 0.0035617 secs] 55901K->24363K(116864K), 0.0036439 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30 23:01:56.585  INFO 145 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'config' of type [com.draios.util.DraiosConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2017-10-30 23:01:56.589  INFO 145 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'asyncConfig' of type [com.draios.conf.AsyncConfig$$EnhancerBySpringCGLIB$$ead471c0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2017-10-30T23:01:56.680+0000: [GC (Allocation Failure) 2017-10-30T23:01:56.680+0000: [ParNew: 33308K->554K(36288K), 0.0068999 secs] 56683K->24315K(116864K), 0.0069798 secs] [Times: user=0.01 sys=0.01, real=0.01 secs] 
2017-10-30 23:01:56.715  INFO 145 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'datasourceConfig' of type [com.draios.conf.DatasourceConfig$$EnhancerBySpringCGLIB$$70aceccf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2017-10-30 23:01:56.797  INFO 145 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'webMvcConfig' of type [com.draios.conf.WebMvcConfig$$EnhancerBySpringCGLIB$$cc6c4c50] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2017-10-30T23:01:56.807+0000: [GC (Allocation Failure) 2017-10-30T23:01:56.807+0000: [ParNew: 32874K->319K(36288K), 0.0033736 secs] 56635K->24266K(116864K), 0.0034281 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:57.012+0000: [GC (Allocation Failure) 2017-10-30T23:01:57.012+0000: [ParNew: 32639K->573K(36288K), 0.0033089 secs] 56586K->24644K(116864K), 0.0033679 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:57.113+0000: [GC (Allocation Failure) 2017-10-30T23:01:57.113+0000: [ParNew: 32893K->533K(36288K), 0.0040218 secs] 56964K->24803K(116864K), 0.0040795 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:57.189+0000: [GC (Allocation Failure) 2017-10-30T23:01:57.189+0000: [ParNew: 32853K->180K(36288K), 0.0047967 secs] 57123K->24585K(116864K), 0.0048618 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:57.422+0000: [GC (Allocation Failure) 2017-10-30T23:01:57.422+0000: [ParNew: 32500K->1115K(36288K), 0.0086548 secs] 56905K->25622K(116864K), 0.0087426 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:57.636+0000: [GC (Allocation Failure) 2017-10-30T23:01:57.636+0000: [ParNew: 33435K->1645K(36288K), 0.0131219 secs] 57942K->27164K(116864K), 0.0131784 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:57.798+0000: [GC (Allocation Failure) 2017-10-30T23:01:57.798+0000: [ParNew: 33965K->513K(36288K), 0.0059725 secs] 59484K->26248K(116864K), 0.0060323 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:57.920+0000: [GC (Allocation Failure) 2017-10-30T23:01:57.920+0000: [ParNew: 32833K->303K(36288K), 0.0081446 secs] 58568K->26196K(116864K), 0.0081994 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:58.021+0000: [GC (Allocation Failure) 2017-10-30T23:01:58.021+0000: [ParNew: 32623K->182K(36288K), 0.0026631 secs] 58516K->26185K(116864K), 0.0027323 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30T23:01:58.257+0000: [GC (Allocation Failure) 2017-10-30T23:01:58.257+0000: [ParNew: 32502K->1354K(36288K), 0.0056779 secs] 58505K->27492K(116864K), 0.0057382 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:58.440+0000: [GC (Allocation Failure) 2017-10-30T23:01:58.440+0000: [ParNew: 33674K->750K(36288K), 0.0119755 secs] 59812K->27762K(116864K), 0.0120387 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30 23:01:58.883  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to users
2017-10-30T23:01:58.985+0000: [GC (Allocation Failure) 2017-10-30T23:01:58.985+0000: [ParNew: 33070K->2125K(36288K), 0.0119652 secs] 60082K->29429K(116864K), 0.0120272 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30 23:01:59.051  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to usersById
2017-10-30 23:01:59.070  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to customers
2017-10-30 23:01:59.088  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to customerAttributesSplit
2017-10-30 23:01:59.105  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to activeCustomers
2017-10-30 23:01:59.122  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to customerUsers
2017-10-30 23:01:59.138  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to customerEnabledUsers
2017-10-30 23:01:59.156  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to userDashboards
2017-10-30 23:01:59.166  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to dashboards
2017-10-30 23:01:59.180  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to groups
2017-10-30 23:01:59.196  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to customersByAccessKey
2017-10-30 23:01:59.217  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to agentsByCustomerIdAndMachineId
2017-10-30 23:01:59.230  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to agentsById
2017-10-30 23:01:59.244  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to agentsByCustomerId
2017-10-30 23:01:59.259  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to awsResourceKeysById
2017-10-30 23:01:59.271  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to awsResourceKeysByCustomerIdAndMachineIdPrefix
2017-10-30 23:01:59.295  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to userAttributes
2017-10-30 23:01:59.306  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to supportedMetrics
2017-10-30 23:01:59.339  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to teams
2017-10-30 23:01:59.348  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to teams_by_user
2017-10-30 23:01:59.355  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to teams_by_customer
2017-10-30 23:01:59.361  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to policiesByCustomer
2017-10-30 23:01:59.367  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to policyById
2017-10-30 23:01:59.380  INFO 145 --- [           main] com.draios.caching.RedisCacheListener    : Attach new cache listener with ID O|A|k9os2 to infrastructureDetailSummaryByCustomer
2017-10-30T23:01:59.395+0000: [GC (Allocation Failure) 2017-10-30T23:01:59.395+0000: [ParNew: 34445K->3664K(36288K), 0.0116699 secs] 61749K->31823K(116864K), 0.0117234 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:59.590+0000: [GC (Allocation Failure) 2017-10-30T23:01:59.590+0000: [ParNew: 35984K->2498K(36288K), 0.0160883 secs] 64143K->34290K(116864K), 0.0161869 secs] [Times: user=0.03 sys=0.00, real=0.02 secs] 
2017-10-30T23:01:59.778+0000: [GC (Allocation Failure) 2017-10-30T23:01:59.778+0000: [ParNew: 34818K->653K(36288K), 0.0037019 secs] 66610K->32604K(116864K), 0.0037849 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] 
2017-10-30T23:01:59.958+0000: [GC (Allocation Failure) 2017-10-30T23:01:59.958+0000: [ParNew: 32973K->558K(36288K), 0.0128432 secs] 64924K->32676K(116864K), 0.0129098 secs] [Times: user=0.03 sys=0.00, real=0.02 secs] 
2017-10-30T23:02:00.085+0000: [GC (Allocation Failure) 2017-10-30T23:02:00.085+0000: [ParNew: 32878K->558K(36288K), 0.0044057 secs] 64996K->32927K(116864K), 0.0044662 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30T23:02:00.263+0000: [GC (Allocation Failure) 2017-10-30T23:02:00.263+0000: [ParNew: 32878K->337K(36288K), 0.0057594 secs] 65247K->32949K(116864K), 0.0058231 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30 23:02:00.319  INFO 145 --- [           main] com.draios.conf.WebMvcConfig             : Gzip compression is ENABLED
2017-10-30T23:02:00.425+0000: [GC (Allocation Failure) 2017-10-30T23:02:00.425+0000: [ParNew: 32657K->410K(36288K), 0.0050688 secs] 65269K->33246K(116864K), 0.0051280 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
2017-10-30 23:02:00.547  INFO 145 --- [           main] org.eclipse.jetty.util.log               : Logging initialized @21917ms to org.eclipse.jetty.util.log.Slf4jLog
2017-10-30T23:02:00.556+0000: [GC (Allocation Failure) 2017-10-30T23:02:00.556+0000: [ParNew: 32730K->539K(36288K), 0.0053252 secs] 65566K->33544K(116864K), 0.0053847 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:02:00.679+0000: [GC (Allocation Failure) 2017-10-30T23:02:00.679+0000: [ParNew: 32859K->472K(36288K), 0.0062162 secs] 65864K->33617K(116864K), 0.0062790 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30 23:02:00.831  INFO 145 --- [           main] e.j.JettyEmbeddedServletContainerFactory : Server initialized with port: 9000
2017-10-30 23:02:00.846  INFO 145 --- [           main] org.eclipse.jetty.server.Server          : jetty-9.4.5.v20170502
2017-10-30T23:02:00.856+0000: [GC (Allocation Failure) 2017-10-30T23:02:00.856+0000: [ParNew: 32792K->878K(36288K), 0.0034658 secs] 65937K->34133K(116864K), 0.0035215 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30T23:02:01.042+0000: [GC (Allocation Failure) 2017-10-30T23:02:01.042+0000: [ParNew: 33198K->613K(36288K), 0.0073853 secs] 66453K->34302K(116864K), 0.0074488 secs] [Times: user=0.02 sys=0.00, real=0.00 secs] 
2017-10-30T23:02:01.159+0000: [GC (Allocation Failure) 2017-10-30T23:02:01.159+0000: [ParNew: 32933K->495K(36288K), 0.0055254 secs] 66622K->34426K(116864K), 0.0055913 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30 23:02:01.198  INFO 145 --- [           main] org.eclipse.jetty.server.session         : DefaultSessionIdManager workerName=node0
2017-10-30 23:02:01.198  INFO 145 --- [           main] org.eclipse.jetty.server.session         : No SessionScavenger set, using defaults
2017-10-30 23:02:01.203  INFO 145 --- [           main] org.eclipse.jetty.server.session         : Scavenging every 660000ms
2017-10-30 23:02:01.212  INFO 145 --- [           main] o.e.j.s.h.ContextHandler.application     : Initializing Spring embedded WebApplicationContext
2017-10-30 23:02:01.212  INFO 145 --- [           main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 17045 ms
2017-10-30T23:02:01.359+0000: [GC (Allocation Failure) 2017-10-30T23:02:01.359+0000: [ParNew: 32815K->463K(36288K), 0.0065133 secs] 66746K->34481K(116864K), 0.0065819 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:02:01.516+0000: [GC (Allocation Failure) 2017-10-30T23:02:01.516+0000: [ParNew: 32783K->383K(36288K), 0.0037271 secs] 66801K->34636K(116864K), 0.0037920 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] 
2017-10-30T23:02:01.720+0000: [GC (Allocation Failure) 2017-10-30T23:02:01.720+0000: [ParNew: 32703K->393K(36288K), 0.0040979 secs] 66956K->34839K(116864K), 0.0041712 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30T23:02:01.821+0000: [GC (Allocation Failure) 2017-10-30T23:02:01.821+0000: [ParNew: 32713K->202K(36288K), 0.0035907 secs] 67159K->34837K(116864K), 0.0036587 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] 
2017-10-30 23:02:01.993  INFO 145 --- [           main] com.draios.conf.CassandraConfig          : Cassandra session initialisation...
2017-10-30 23:02:02.057  INFO 145 --- [           main] c.datastax.driver.core.FrameCompressor   : Using LZ4Factory:JavaUnsafe
2017-10-30 23:02:02.167  INFO 145 --- [           main] com.datastax.driver.core.NettyUtil       : Found Netty's native epoll transport in the classpath, using it
2017-10-30T23:02:02.199+0000: [GC (Allocation Failure) 2017-10-30T23:02:02.199+0000: [ParNew: 32522K->1607K(36288K), 0.0049892 secs] 67157K->36350K(116864K), 0.0050534 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
2017-10-30T23:02:02.651+0000: [GC (Allocation Failure) 2017-10-30T23:02:02.651+0000: [ParNew: 33927K->2787K(36288K), 0.0073839 secs] 68670K->38019K(116864K), 0.0074541 secs] [Times: user=0.01 sys=0.01, real=0.00 secs] 
2017-10-30 23:02:02.883  INFO 145 --- [           main] c.d.d.c.p.DCAwareRoundRobinPolicy        : Using data-center name 'datacenter1' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)
2017-10-30 23:02:02.884  INFO 145 --- [           main] com.datastax.driver.core.Cluster         : New Cassandra host sysdigcloud-cassandra/10.2.79.127:9042 added
2017-10-30 23:02:02.884  INFO 145 --- [           main] com.datastax.driver.core.Cluster         : New Cassandra host /10.2.73.104:9042 added
2017-10-30 23:02:02.884  INFO 145 --- [           main] com.datastax.driver.core.Cluster         : New Cassandra host /10.2.31.137:9042 added
2017-10-30 23:02:03.006  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Redis lock acquired
2017-10-30 23:02:03.024  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Cassandra migrations: creating new DRAIOS schema using RF=1
2017-10-30 23:02:04.143  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: use draios
2017-10-30 23:02:04.150  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists migrations (
	script_name varchar,
	version int,
	ts bigint,
	success boolean,
	primary key (script_name)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:02:05.565  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Cassandra migrations: running script cql/sysdig.cql, (version 1)
2017-10-30 23:02:05.567  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: use draios
2017-10-30 23:02:05.571  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists shard_metadata (
	customer int,
	name varchar,
	ts_min bigint,
	ts_max bigint,
	primary key(customer,name)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:02:06.723  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists data_by_agent1 (
	customer int,
	base bigint,
	ts bigint,
	agent int,
	weight bigint,
	metadata blob,
	hostinfo blob,
	programs blob,
	jmx_programs blob,
	container_programs blob,
	ipv4_connections blob,
	ipv4_network_interfaces blob,
	mounts blob,
	top_files blob,
	protos blob,
	containers blob,
	primary key ((customer, base, agent), ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (ts DESC)
2017-10-30 23:02:08.112  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists data_by_agent60 (
	customer int,
	base bigint,
	ts bigint,
	agent int,
	weight bigint,
	metadata blob,
	hostinfo blob,
	programs blob,
	jmx_programs blob,
	container_programs blob,
	ipv4_connections blob,
	ipv4_network_interfaces blob,
	mounts blob,
	top_files blob,
	protos blob,
	containers blob,
	primary key ((customer, base, agent), ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (ts DESC)
2017-10-30 23:02:10.130  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists data_by_agent600 (
	customer int,
	base bigint,
	ts bigint,
	agent int,
	weight bigint,
	metadata blob,
	hostinfo blob,
	programs blob,
	jmx_programs blob,
	container_programs blob,
	ipv4_connections blob,
	ipv4_network_interfaces blob,
	mounts blob,
	top_files blob,
	protos blob,
	containers blob,
	primary key ((customer, base, agent), ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (ts DESC)
2017-10-30 23:02:12.212  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists data_by_agent3600 (
	customer int,
	base bigint,
	ts bigint,
	agent int,
	weight bigint,
	metadata blob,
	hostinfo blob,
	programs blob,
	jmx_programs blob,
	container_programs blob,
	ipv4_connections blob,
	ipv4_network_interfaces blob,
	mounts blob,
	top_files blob,
	protos blob,
	containers blob,
	primary key ((customer, base, agent), ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (ts DESC)
2017-10-30 23:02:14.216  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists data_by_agent86400 (
	customer int,
	base bigint,
	ts bigint,
	agent int,
	weight bigint,
	metadata blob,
	hostinfo blob,
	programs blob,
	jmx_programs blob,
	container_programs blob,
	ipv4_connections blob,
	ipv4_network_interfaces blob,
	mounts blob,
	top_files blob,
	protos blob,
	containers blob,
	primary key ((customer, base, agent), ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (ts DESC)
2017-10-30 23:02:16.249  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists provider_hosts (
	customer int,
	ts bigint,
	hosts text,
	primary key (customer, ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (ts DESC)
2017-10-30 23:02:17.476  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists provider_metrics (
	customer int,
	host_id varchar,
	metric varchar,
	ts bigint,
	value double,
	primary key ((customer, host_id), metric, ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (metric ASC) AND
	CLUSTERING ORDER BY (ts ASC)
2017-10-30 23:02:19.111  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists baseline_metrics (
	customer int,
	watch_id bigint,
	object_id varchar,
	metric varchar,
	ts bigint,
	type varchar,
	value double,
	low_threshold double,
	up_threshold double,
	primary key ((customer, watch_id, object_id), metric, type, ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (metric ASC) AND
	CLUSTERING ORDER BY (type ASC) AND
	CLUSTERING ORDER BY (ts ASC)
2017-10-30 23:02:21.129  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists baseline_state (
	customer int,
	watch_id bigint,
	object_id varchar,
	baseline_state varchar,
	primary key (customer, watch_id, object_id)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:02:22.315  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists baseline_alerts (
	customer int,
	ts bigint,
	watch_id bigint,
	object_id varchar,
	metric varchar,
	alert varchar,
	primary key (customer, ts, watch_id, object_id, metric)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (ts DESC)
2017-10-30 23:02:24.138  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: CREATE INDEX if not exists baseline_alerts_watch_id ON baseline_alerts(watch_id)
2017-10-30 23:02:26.127  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Cassandra migrations: running script cql/sysdig-aws.cql, (version 2)
2017-10-30 23:02:26.128  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: use draios
2017-10-30 23:02:26.130  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists aws_shard_metadata (
	customer int,
	res_type int,
	name varchar,
	ts_min bigint,
	ts_max bigint,
	primary key(customer,res_type,name)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:02:28.310  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists aws_protobuf60 (
	customer int,
	base bigint,
	res_type int,
	ts bigint,
	res_id int,
	value blob,
	primary key ((customer, base), res_type, ts, res_id)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (res_type DESC) AND
	CLUSTERING ORDER BY (ts DESC)
2017-10-30 23:02:30.108  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists aws_protobuf_by_id60 (
	customer int,
	base bigint,
	res_id int,
	ts bigint,
	res_type int,
	value blob,
	primary key ((customer, base), res_id, ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (res_id DESC)
2017-10-30 23:02:32.110  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists aws_protobuf600 (
	customer int,
	base bigint,
	res_type int,
	ts bigint,
	res_id int,
	value blob,
	primary key ((customer, base), res_type, ts, res_id)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (res_type DESC) AND
	CLUSTERING ORDER BY (ts DESC)
2017-10-30 23:02:34.294  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists aws_protobuf_by_id600 (
	customer int,
	base bigint,
	res_id int,
	ts bigint,
	res_type int,
	value blob,
	primary key ((customer, base), res_id, ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (res_id DESC)
2017-10-30 23:02:36.257  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists aws_protobuf3600 (
	customer int,
	base bigint,
	res_type int,
	ts bigint,
	res_id int,
	value blob,
	primary key ((customer, base), res_type, ts, res_id)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (res_type DESC) AND
	CLUSTERING ORDER BY (ts DESC)
2017-10-30 23:02:38.311  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists aws_protobuf_by_id3600 (
	customer int,
	base bigint,
	res_id int,
	ts bigint,
	res_type int,
	value blob,
	primary key ((customer, base), res_id, ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (res_id DESC)
2017-10-30 23:02:40.170  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists aws_protobuf86400 (
	customer int,
	base bigint,
	res_type int,
	ts bigint,
	res_id int,
	value blob,
	primary key ((customer, base), res_type, ts, res_id)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (res_type DESC) AND
	CLUSTERING ORDER BY (ts DESC)
2017-10-30 23:02:42.173  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists aws_protobuf_by_id86400 (
	customer int,
	base bigint,
	res_id int,
	ts bigint,
	res_type int,
	value blob,
	primary key ((customer, base), res_id, ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (res_id DESC)
2017-10-30 23:02:43.361  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Cassandra migrations: running script cql/sysdig-remember-me.cql, (version 3)
2017-10-30 23:02:43.362  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: use draios
2017-10-30 23:02:43.364  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists remember_me_tokens (
	username varchar, 
	token_value varchar, 
	valid_until bigint,
	primary key((username, token_value))
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:02:44.583  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Cassandra migrations: running script cql/sysdig-connected-agents.cql, (version 4)
2017-10-30 23:02:44.584  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: use draios
2017-10-30 23:02:44.586  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists connected_agents1 (
	customer int,
	base bigint,
	agents set<int>,

	primary key ((customer, base))
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:02:46.126  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists connected_agents60 (
	customer int,
	base bigint,
	agents set<int>,

	primary key ((customer, base))
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:02:48.288  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists connected_agents600 (
	customer int,
	base bigint,
	agents set<int>,

	primary key ((customer, base))
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:02:50.271  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists connected_agents3600 (
	customer int,
	base bigint,
	agents set<int>,

	primary key ((customer, base))
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:02:52.265  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists connected_agents86400 (
	customer int,
	base bigint,
	agents set<int>,

	primary key ((customer, base))
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:02:54.217  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Cassandra migrations: running script cql/sysdig-custom-metrics.cql, (version 5)
2017-10-30 23:02:54.218  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: use draios
2017-10-30 23:02:54.221  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists custom_metrics (
	customer int,
	metadata text,
	metric_id text,
	type text,
	primary key (customer, metric_id)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:02:56.250  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Cassandra migrations: running script cql/sysdig-kubernetes-column.cql, (version 6)
2017-10-30 23:02:56.250  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: use draios
2017-10-30 23:02:56.253  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: ALTER TABLE data_by_agent1 ADD kubernetes blob
2017-10-30 23:02:58.195  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: ALTER TABLE data_by_agent60 ADD kubernetes blob
2017-10-30 23:03:00.162  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: ALTER TABLE data_by_agent600 ADD kubernetes blob
2017-10-30 23:03:01.362  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: ALTER TABLE data_by_agent3600 ADD kubernetes blob
2017-10-30T23:03:03.115+0000: [GC (Allocation Failure) 2017-10-30T23:03:03.115+0000: [ParNew: 35107K->2449K(36288K), 0.0086062 secs] 70339K->38409K(116864K), 0.0086742 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] 
2017-10-30 23:03:03.125  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: ALTER TABLE data_by_agent86400 ADD kubernetes blob
2017-10-30 23:03:04.290  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Cassandra migrations: running script cql/sysdig-mesos-column.cql, (version 7)
2017-10-30 23:03:04.291  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: use draios
2017-10-30 23:03:04.293  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: ALTER TABLE data_by_agent1 ADD mesos blob
2017-10-30 23:03:06.298  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: ALTER TABLE data_by_agent60 ADD mesos blob
2017-10-30 23:03:07.438  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: ALTER TABLE data_by_agent600 ADD mesos blob
2017-10-30 23:03:09.197  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: ALTER TABLE data_by_agent3600 ADD mesos blob
2017-10-30 23:03:10.344  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: ALTER TABLE data_by_agent86400 ADD mesos blob
2017-10-30 23:03:12.309  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Cassandra migrations: running script cql/sysdig-timeline-10.cql, (version 8)
2017-10-30 23:03:12.311  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: use draios
2017-10-30 23:03:12.314  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists data_by_agent10 (
	customer int,
	base bigint,
	ts bigint,
	agent int,
	weight bigint,
	metadata blob,
	hostinfo blob,
	programs blob,
	jmx_programs blob,
	container_programs blob,
	ipv4_connections blob,
	ipv4_network_interfaces blob,
	mounts blob,
	top_files blob,
	protos blob,
	containers blob,
	kubernetes blob,
	mesos blob,
	primary key ((customer, base, agent), ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (ts DESC)
2017-10-30 23:03:14.297  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists connected_agents10 (
    customer int,
    base bigint,
    agents set<int>,

    primary key ((customer, base))
) WITH
    gc_grace_seconds = 3600 AND
    compaction = {'class': 'LeveledCompactionStrategy'} AND
    compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:03:16.277  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Cassandra migrations: running script cql/sysdig-fast-path.cql, (version 9)
2017-10-30 23:03:16.278  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: use draios
2017-10-30 23:03:16.280  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists fast_path_data1 (
	customer int,
	fast_path_id bigint,
	base bigint,
	ts bigint,
	data blob,
	primary key ((customer, fast_path_id, base), ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (ts DESC)
2017-10-30 23:03:18.231  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists fast_path_data10 (
	customer int,
	fast_path_id bigint,
	base bigint,
	ts bigint,
	data blob,
	primary key ((customer, fast_path_id, base), ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (ts DESC)
2017-10-30 23:03:20.212  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists fast_path_data60 (
	customer int,
	fast_path_id bigint,
	base bigint,
	ts bigint,
	data blob,
	primary key ((customer, fast_path_id, base), ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (ts DESC)
2017-10-30 23:03:21.349  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists fast_path_data600 (
	customer int,
	fast_path_id bigint,
	base bigint,
	ts bigint,
	data blob,
	primary key ((customer, fast_path_id, base), ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (ts DESC)
2017-10-30 23:03:23.289  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists fast_path_data3600 (
	customer int,
	fast_path_id bigint,
	base bigint,
	ts bigint,
	data blob,
	primary key ((customer, fast_path_id, base), ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (ts DESC)
2017-10-30 23:03:24.427  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists fast_path_data86400 (
	customer int,
	fast_path_id bigint,
	base bigint,
	ts bigint,
	data blob,
	primary key ((customer, fast_path_id, base), ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (ts DESC)
2017-10-30 23:03:26.210  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Cassandra migrations: running script cql/sysdig-single-column.cql, (version 10)
2017-10-30 23:03:26.211  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: use draios
2017-10-30 23:03:26.213  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists message_data1 (
	customer int,
	base bigint,
	ts bigint,
	agent int,
	weight bigint,
	type varchar,
	val blob,
	primary key ((customer, base, agent), type, ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (type ASC, ts DESC)
2017-10-30 23:03:28.204  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists message_data10 (
	customer int,
	base bigint,
	ts bigint,
	agent int,
	weight bigint,
	type varchar,
	val blob,
	primary key ((customer, base, agent), type, ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (type ASC, ts DESC)
2017-10-30 23:03:30.198  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists message_data60 (
	customer int,
	base bigint,
	ts bigint,
	agent int,
	weight bigint,
	type varchar,
	val blob,
	primary key ((customer, base, agent), type, ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (type ASC, ts DESC)
2017-10-30 23:03:31.420  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists message_data600 (
	customer int,
	base bigint,
	ts bigint,
	agent int,
	weight bigint,
	type varchar,
	val blob,
	primary key ((customer, base, agent), type, ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (type ASC, ts DESC)
2017-10-30 23:03:33.214  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists message_data3600 (
	customer int,
	base bigint,
	ts bigint,
	agent int,
	weight bigint,
	type varchar,
	val blob,
	primary key ((customer, base, agent), type, ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (type ASC, ts DESC)
2017-10-30 23:03:35.157  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists message_data86400 (
	customer int,
	base bigint,
	ts bigint,
	agent int,
	weight bigint,
	type varchar,
	val blob,
	primary key ((customer, base, agent), type, ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (type ASC, ts DESC)
2017-10-30 23:03:37.156  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Cassandra migrations: running script cql/sysdig-migration-team-custom-metrics.cql, (version 11)
2017-10-30 23:03:37.157  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: use draios
2017-10-30 23:03:37.159  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: DROP TABLE IF EXISTS custom_metrics
2017-10-30 23:03:39.182  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists custom_metrics (
    customer int,
    team_id int,
    metadata text,
    metric_id text,
    type text,
    primary key ((customer, team_id), metric_id)
) WITH
    gc_grace_seconds = 3600 AND
    compaction = {'class': 'LeveledCompactionStrategy'} AND
    compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:03:41.251  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Cassandra migrations: running script cql/sysdig-collector-health.cql, (version 12)
2017-10-30 23:03:41.254  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: use draios
2017-10-30 23:03:41.257  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists collector_processed_samples (
	base bigint,
	ts bigint,
	customer int,
	samples counter, 
	primary key ((base), ts, customer)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:03:42.528  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists collector_health_baseline (
	base bigint,
	ts bigint,
	healthy boolean,
	baseline varchar,
	primary key ((base), ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:03:44.299  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Cassandra migrations: running script cql/sysdig-id-generator.cql, (version 13)
2017-10-30 23:03:44.300  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: use draios
2017-10-30 23:03:44.302  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists id_generators (
	instance_id varchar,
	machine bigint,
    check_in bigint,
	primary key (instance_id)
) WITH
  	gc_grace_seconds = 3600 AND
  	compaction = {'class': 'LeveledCompactionStrategy'} AND
  	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
    default_time_to_live = 900
2017-10-30 23:03:46.271  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Cassandra migrations: running script cql/sysdig-events.cql, (version 14)
2017-10-30 23:03:46.271  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: use draios
2017-10-30 23:03:46.274  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists events (
	customer int,
	base bigint,
	ts bigint,
    object_id varchar,
	json blob,
	primary key ((customer, base), ts, object_id)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
    default_time_to_live = 5184000 AND
	CLUSTERING ORDER BY (ts DESC)
2017-10-30 23:03:48.140  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Cassandra migrations: running script cql/sysdig-blobsize-metrics.cql, (version 15)
2017-10-30 23:03:48.141  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: use draios
2017-10-30 23:03:48.144  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: CREATE TYPE if not exists value_counter (
    total bigint,
    items_count int
)
2017-10-30 23:03:50.264  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists blob_size_metrics (
    customer int,
    weight int,
    ts bigint,
    metrics map<varchar, frozen<value_counter>>,
    primary key ((customer, weight), ts)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:03:52.124  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Cassandra migrations: running script cql/sysdig-fast-path-parts.cql, (version 16)
2017-10-30 23:03:52.124  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: use draios
2017-10-30 23:03:52.125  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists fast_path_data_parts (
	customer int,
	fast_path_id bigint,
	timeline int,
	base bigint,
	ts bigint,
	part_id int,
	data blob,
	primary key ((customer, fast_path_id, timeline, base), ts, part_id)
) WITH
	gc_grace_seconds = 3600 AND
	compaction = {'class': 'LeveledCompactionStrategy'} AND
	compression = { 'sstable_compression' : 'LZ4Compressor' } AND
	CLUSTERING ORDER BY (ts DESC)
2017-10-30 23:03:54.122  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Cassandra migrations: running script cql/sysdig-chunked-files.cql, (version 17)
2017-10-30 23:03:54.122  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: use draios
2017-10-30 23:03:54.124  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: create table if not exists chunked_files (
  file_id int,
  base int,
  chunk_id int,
  data blob,
  primary key ((file_id, base), chunk_id)
) WITH
  gc_grace_seconds = 3600 AND
  compaction = {'class': 'LeveledCompactionStrategy'} AND
  compression = { 'sstable_compression' : 'LZ4Compressor' } AND
  CLUSTERING ORDER BY (chunk_id ASC)
2017-10-30 23:03:55.358  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Cassandra migrations: running script cql/sysdig-orchestrator-data.cql, (version 18)
2017-10-30 23:03:55.360  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: use draios
2017-10-30 23:03:55.361  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: CREATE TABLE IF NOT exists orchestrator_data1 (
  customer int,
  base bigint,
  cluster_id text,
  type text,
  ts bigint,
  val blob,
  weight bigint,
  PRIMARY KEY ((customer, base, cluster_id), type, ts)
) WITH
  CLUSTERING ORDER BY (type ASC, ts DESC) AND
  gc_grace_seconds = 3600 AND
  compaction = {'class': 'LeveledCompactionStrategy'} AND
  compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:03:57.161  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: CREATE TABLE IF NOT exists orchestrator_data10 (
  customer int,
  base bigint,
  cluster_id text,
  type text,
  ts bigint,
  val blob,
  weight bigint,
  PRIMARY KEY ((customer, base, cluster_id), type, ts)
) WITH
  CLUSTERING ORDER BY (type ASC, ts DESC) AND
  gc_grace_seconds = 3600 AND
  compaction = {'class': 'LeveledCompactionStrategy'} AND
  compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:03:59.170  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: CREATE TABLE IF NOT exists orchestrator_data60 (
  customer int,
  base bigint,
  cluster_id text,
  type text,
  ts bigint,
  val blob,
  weight bigint,
  PRIMARY KEY ((customer, base, cluster_id), type, ts)
) WITH
  CLUSTERING ORDER BY (type ASC, ts DESC) AND
  gc_grace_seconds = 3600 AND
  compaction = {'class': 'LeveledCompactionStrategy'} AND
  compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:04:01.208  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: CREATE TABLE IF NOT exists orchestrator_data600 (
  customer int,
  base bigint,
  cluster_id text,
  type text,
  ts bigint,
  val blob,
  weight bigint,
  PRIMARY KEY ((customer, base, cluster_id), type, ts)
) WITH
  CLUSTERING ORDER BY (type ASC, ts DESC) AND
  gc_grace_seconds = 3600 AND
  compaction = {'class': 'LeveledCompactionStrategy'} AND
  compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:04:03.249  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: CREATE TABLE IF NOT exists orchestrator_data3600 (
  customer int,
  base bigint,
  cluster_id text,
  type text,
  ts bigint,
  val blob,
  weight bigint,
  PRIMARY KEY ((customer, base, cluster_id), type, ts)
) WITH
  CLUSTERING ORDER BY (type ASC, ts DESC) AND
  gc_grace_seconds = 3600 AND
  compaction = {'class': 'LeveledCompactionStrategy'} AND
  compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:04:05.273  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: CREATE TABLE IF NOT exists orchestrator_data86400 (
  customer int,
  base bigint,
  cluster_id text,
  type text,
  ts bigint,
  val blob,
  weight bigint,
  PRIMARY KEY ((customer, base, cluster_id), type, ts)
) WITH
  CLUSTERING ORDER BY (type ASC, ts DESC) AND
  gc_grace_seconds = 3600 AND
  compaction = {'class': 'LeveledCompactionStrategy'} AND
  compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:04:07.311  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: CREATE TABLE IF NOT exists connected_orchestrator_clusters1 (
  customer int,
  base bigint,
  cluster_metadata map < text, text >,
  PRIMARY KEY ((customer, base))
) WITH
  gc_grace_seconds = 3600 AND
  compaction = {'class': 'LeveledCompactionStrategy'} AND
  compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:04:09.119  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: CREATE TABLE IF NOT exists connected_orchestrator_clusters10 (
  customer int,
  base bigint,
  cluster_metadata map < text, text >,
  PRIMARY KEY ((customer, base))
) WITH
  gc_grace_seconds = 3600 AND
  compaction = {'class': 'LeveledCompactionStrategy'} AND
  compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:04:11.318  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: CREATE TABLE IF NOT exists connected_orchestrator_clusters60 (
  customer int,
  base bigint,
  cluster_metadata map < text, text >,
  PRIMARY KEY ((customer, base))
) WITH
  gc_grace_seconds = 3600 AND
  compaction = {'class': 'LeveledCompactionStrategy'} AND
  compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:04:13.123  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: CREATE TABLE IF NOT exists connected_orchestrator_clusters600 (
  customer int,
  base bigint,
  cluster_metadata map < text, text >,
  PRIMARY KEY ((customer, base))
) WITH
  gc_grace_seconds = 3600 AND
  compaction = {'class': 'LeveledCompactionStrategy'} AND
  compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:04:15.322  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: CREATE TABLE IF NOT exists connected_orchestrator_clusters3600 (
  customer int,
  base bigint,
  cluster_metadata map < text, text >,
  PRIMARY KEY ((customer, base))
) WITH
  gc_grace_seconds = 3600 AND
  compaction = {'class': 'LeveledCompactionStrategy'} AND
  compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:04:17.320  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Executing migration: CREATE TABLE IF NOT exists connected_orchestrator_clusters86400 (
  customer int,
  base bigint,
  cluster_metadata map < text, text >,
  PRIMARY KEY ((customer, base))
) WITH
  gc_grace_seconds = 3600 AND
  compaction = {'class': 'LeveledCompactionStrategy'} AND
  compression = { 'sstable_compression' : 'LZ4Compressor' }
2017-10-30 23:04:19.161  INFO 145 --- [           main] com.draios.storage.cassandra.AutoSchema  : Cassandra migrations: schema is up to date
2017-10-30 23:04:19.215  INFO 145 --- [           main] com.draios.conf.CassandraConfig          : ...done: new Cassandra session built com.datastax.driver.core.SessionManager@7a583586
2017-10-30 23:04:19.348  INFO 145 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2017-10-30T23:04:19.379+0000: [GC (Allocation Failure) 2017-10-30T23:04:19.379+0000: [ParNew: 34769K->1496K(36288K), 0.0152392 secs] 70729K->38823K(116864K), 0.0153113 secs] [Times: user=0.03 sys=0.00, real=0.02 secs] 
